
#Область  ПрограммныйИнтерфейс

//TODO:  Подумать над реализацией
// Возвращает основные настройки узла обмена
// Параметры:
//  НастройкиРегистрации - строка - текст регистрации объектов узла - участника обмена
//  РежимОтладки	- Булево - Признак отладки
//  ПутьКОбработкиОтладки	- Строка - Путь к файловой обработке отладки
//  ИспользоватьОбработкуБСП	- Булево - Обработка берется с ДопОтчетовОбработок
//  ОбработкаОтладкиБСП	- СсылкаОбработки - Ссылка на внешнюю обработку
//  Логировать	- Булево - Признак записи ошибок в телеграмм
//  ЧатТелеграмм - Строка - ИД чата телеграмм
//
// Возвращаемое значение:
//  НастройкиРегистрации   - Структура с полями
//	Неопределено - В случае ошибки
//
Функция НастройкиРегистрации(БазаДанных = Неопределено)  Экспорт 
	
	Запрос = Новый Запрос;
	ЗапросТекст = 
		"ВЫБРАТЬ
		|	оду_НастройкиУчастниковОбмена.НастройкиРегистрации КАК НастройкиРегистрации,
		|	оду_НастройкиУчастниковОбмена.РежимОтладки КАК РежимОтладки,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.ЭтоРабочаяБД КАК ЭтоРабочаяБД,
		|	оду_НастройкиУчастниковОбмена.ПутьКОбработкиОтладки КАК ПутьКОбработкиОтладки,
		|	оду_НастройкиУчастниковОбмена.ИспользоватьОбработкуБСП КАК ИспользоватьОбработкуБСП,
		|	оду_НастройкиУчастниковОбмена.ОбработкаОтладкиБСП КАК ОбработкаОтладкиБСП
		|ИЗ
		|	РегистрСведений.оду_НастройкиУчастниковОбмена КАК оду_НастройкиУчастниковОбмена
		//|";
		|ГДЕ
		|	#ГдеОтбор
		|";
	
	ГдеОтбор = "";
	Если БазаДанных = Неопределено Тогда
		ГдеОтбор = "оду_НастройкиУчастниковОбмена.БазаДанных.ТекущаяБД = ИСТИНА";
	Иначе
		ГдеОтбор = "оду_НастройкиУчастниковОбмена.БазаДанных = &БазаДанных";
		Запрос.УстановитьПараметр("БазаДанных", БазаДанных);
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(ЗапросТекст, "#ГдеОтбор", ГдеОтбор);
	
	РЗ = Запрос.Выполнить();

	Если РЗ.Пустой() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Заполните 2 Регистра сведений: *Настройки узлов обмена БД
							|	И *Настройки БД ";
		Сообщение.Сообщить(); 
		Возврат Неопределено;
	КонецЕсли; 
	
	НастройкиРегистрации = пр_Общий.СтруктураПоЗапросу(РЗ);
	
	Возврат НастройкиРегистрации;	

КонецФункции // ()

// Возвращает основные настройки узла обмена
// Параметры:
//  НастройкиРегистрации - строка - текст регистрации объектов узла - участника обмена
//  РежимОтладки	- Булево - Признак отладки
//  ПутьКОбработкиОтладки	- Строка - Путь к файловой обработке отладки
//  ИспользоватьОбработкуБСП	- Булево - Обработка берется с ДопОтчетовОбработок
//  ОбработкаОтладкиБСП	- СсылкаОбработки - Ссылка на внешнюю обработку
//  Логировать	- Булево - Признак записи ошибок в телеграмм
//  ЧатТелеграмм - Строка - ИД чата телеграмм
//
// Возвращаемое значение:
//  НастройкиРегистрации   - Структура с полями
//	Неопределено - В случае ошибки
//
Функция НастройкиТекущейБД()  Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_НастройкиУчастниковОбмена.БазаДанных КАК БазаДанных,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.ИДБазы КАК ИДБазыИсточник,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Код КАК КодБазыДанных,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Сервер + "" : "" + оду_НастройкиУчастниковОбмена.БазаДанных.Код + "" - "" + оду_НастройкиУчастниковОбмена.БазаДанных.ИДКонфигурации + "" ("" + оду_НастройкиУчастниковОбмена.БазаДанных.ИДБазы + "")"" КАК ПредставлениеТекущейБД,
		|	оду_НастройкиУчастниковОбмена.НастройкиРегистрации КАК НастройкиРегистрации,
		|	оду_НастройкиУчастниковОбмена.РежимОтладки КАК РежимОтладки,
		|	оду_НастройкиУчастниковОбмена.ПутьКОбработкиОтладки КАК ПутьКОбработкиОтладки,
		|	оду_НастройкиУчастниковОбмена.ИспользоватьОбработкуБСП КАК ИспользоватьОбработкуБСП,
		|	оду_НастройкиУчастниковОбмена.ОбработкаОтладкиБСП КАК ОбработкаОтладкиБСП,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.ИДКонфигурации КАК БазаДанныхИДКонфигурации,
		|	ЕСТЬNULL(оду_НастройкиИнформационнойБазы.chat_id, """") КАК chat_id,
		|	ЕСТЬNULL(оду_НастройкиИнформационнойБазы.token, """") КАК token,
		|	ЕСТЬNULL(оду_НастройкиИнформационнойБазы.Логировать, ЛОЖЬ) КАК Логировать,
		|	ЕСТЬNULL(оду_НастройкиИнформационнойБазы.КаталогОбмена, """") КАК КаталогОбмена,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(оду_НастройкиИнформационнойБазы.КоличествоОбъектовВПакетеОбмена, 0) = 0
		|			ТОГДА 25
		|		ИНАЧЕ оду_НастройкиИнформационнойБазы.КоличествоОбъектовВПакетеОбмена
		|	КОНЕЦ КАК КоличествоОбъектовВПакетеОбмена,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(оду_НастройкиИнформационнойБазы.КоличествоПопытокПриОшибке, 0) = 0
		|			ТОГДА 3
		|		ИНАЧЕ оду_НастройкиИнформационнойБазы.КоличествоПопытокПриОшибке
		|	КОНЕЦ КАК КоличествоПопытокПриОшибке,
		|	оду_НастройкиУчастниковОбмена.Используется КАК Используется
		|ИЗ
		|	РегистрСведений.оду_НастройкиУчастниковОбмена КАК оду_НастройкиУчастниковОбмена
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.оду_НастройкиИнформационнойБазы КАК оду_НастройкиИнформационнойБазы
		|		ПО (ИСТИНА)
		|ГДЕ
		|	оду_НастройкиУчастниковОбмена.БазаДанных.ТекущаяБД = ИСТИНА";
	
	РЗ = Запрос.Выполнить();
	
	Возврат пр_Общий.СтруктураПоЗапросу(РЗ);

КонецФункции // ()

//TODO:  
//Удалить ?
//Правила обмена данных текущей Информационной базы
Функция ПОДТекущейБД()  Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_НастройкиУчастниковОбмена.БазаДанных КАК БазаДанных,
		|	оду_НастройкиУчастниковОбмена.ПОД КАК ПОД
		|ИЗ
		|	РегистрСведений.оду_НастройкиУчастниковОбмена КАК оду_НастройкиУчастниковОбмена
		|ГДЕ
		|	оду_НастройкиУчастниковОбмена.БазаДанных.ТекущаяБД = ИСТИНА";
	
	РЗ = Запрос.Выполнить();
	
	Возврат пр_Общий.СтруктураПоЗапросу(РЗ);

КонецФункции // ()


//Функция ЭтаРабочаяБД()   Экспорт 
//	ИмяИБ = оду_ОбменПовтИсп.ПолучитьИмяИнформационнойБазы();
//	ЭтаРабочаяБД = НРег(ИмяИБ) = НРег("baseUT");
//	Возврат ЭтаРабочаяБД;
//КонецФункции 
 
Функция ПолучитьИмяИнформационнойБазы()	Экспорт
	Возврат пр_Общий.ПолучитьИмяИнформационнойБазы();
КонецФункции 

Функция ИДКонфигурации() Экспорт
	
	Возврат пр_Общий.ИДКонфигурации();
	
КонецФункции // ИДКонфигурации()

Функция ПрефиксЭтойИБ()  Экспорт
	Возврат Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
КонецФункции 

Функция СтруктураПараметровЗаписиОшибки() Экспорт
	
	СтруктураПЗО = Новый Структура("ИДОбъекта, ИДБазы, ОбъектОбмена, РежимОбмена, СостояниеОбмена, ИмяФайлаОбмена, НомерПопытки, ОписаниеОшибки"); 	
	Возврат СтруктураПЗО;
	
КонецФункции 

&НаСервере
Функция ТаблицаСостоянийОбмена() Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИДОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ТЗ.Колонки.Добавить("ИДБазыИсточник", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ТЗ.Колонки.Добавить("ИДБазыПриемник", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ТЗ.Колонки.Добавить("РежимОбмена", Новый ОписаниеТипов("ПеречислениеСсылка.оду_РежимОбмена"));
	ТЗ.Колонки.Добавить("СостояниеОбмена", Новый ОписаниеТипов("ПеречислениеСсылка.оду_СостоянияОбмена"));
	ТЗ.Колонки.Добавить("ТипXMLОбъектаИсточника", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТЗ.Колонки.Добавить("ТипXMLОбъектаПриемника", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТЗ.Колонки.Добавить("ДатаРегистрации", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТЗ.Колонки.Добавить("ДатаВыгрузки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТЗ.Колонки.Добавить("ИмяФайлаОбмена", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТЗ.Колонки.Добавить("ПриоритетОбмена", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	ТЗ.Колонки.Добавить("ПриоритетОбъекта", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
	ТЗ.Колонки.Добавить("ПриоритетДопПризнака", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	ТЗ.Колонки.Добавить("НомерПопытки", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	ТЗ.Колонки.Добавить("СменаИсточникаПриеменикаПриРазрешенииКоллизий", Новый ОписаниеТипов("Булево"));
	
	//Доп. колонки сервисные
	ТЗ.Колонки.Добавить("ОбъектОбмена", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ТЗ.Колонки.Добавить("ОписаниеОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТЗ.Колонки.Добавить("Обработан", Новый ОписаниеТипов("Булево"));
	
	Возврат ТЗ;
	
КонецФункции 

#КонецОбласти

#Область  Ссылки

Функция СсылкаТекущейБД()  Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_НастройкиУчастниковОбмена.БазаДанных КАК БазаДанных
		|ИЗ
		|	РегистрСведений.оду_НастройкиУчастниковОбмена КАК оду_НастройкиУчастниковОбмена
		|ГДЕ
		|	оду_НастройкиУчастниковОбмена.БазаДанных.ТекущаяБД = ИСТИНА";
	
	РЗ = Запрос.Выполнить();
	
	Если РЗ.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВДЗ = РЗ.Выбрать();
	
	Если ВДЗ.Следующий() Тогда
		Возврат ВДЗ.БазаДанных;
	КонецЕсли; 

КонецФункции // ()

#Область  РежимыОбмена

Функция РежимЗагрузка()	Экспорт
	Возврат ПредопределенноеЗначение("Перечисление.оду_РежимОбмена.ЗагрузкаДанных");
КонецФункции 

Функция РежимВыгрузка()	Экспорт
	Возврат ПредопределенноеЗначение("Перечисление.оду_РежимОбмена.ВыгрузкаДанных");
КонецФункции 

Функция РежимЗапросСсылки()	Экспорт
	Возврат ПредопределенноеЗначение("Перечисление.оду_РежимОбмена.ЗапросСсылки");
КонецФункции 

Функция РежимЗапросДвижений()	Экспорт
	Возврат ПредопределенноеЗначение("Перечисление.оду_РежимОбмена.ЗапросДвижений");
КонецФункции 

#КонецОбласти

#Область  СостоянияОбмена

Функция СостояниеРазрешениеКоллизий()	Экспорт
	Возврат ПредопределенноеЗначение("Перечисление.оду_СостоянияОбмена.РазрешениеКоллизий");
КонецФункции 

Функция СостояниеПроверкаДанных()	Экспорт
	Возврат ПредопределенноеЗначение("Перечисление.оду_СостоянияОбмена.ПроверкаДанных");
КонецФункции 

Функция СостояниеВыгрузка()	Экспорт
	Возврат ПредопределенноеЗначение("Перечисление.оду_СостоянияОбмена.Выгрузка");
КонецФункции 

Функция СостояниеВыгружен()	Экспорт
	Возврат ПредопределенноеЗначение("Перечисление.оду_СостоянияОбмена.Выгружен");
КонецФункции 

Функция СостояниеЗагрузка()	Экспорт
	Возврат ПредопределенноеЗначение("Перечисление.оду_СостоянияОбмена.Загрузка");
КонецФункции 

Функция СостояниеЗагружен()	Экспорт
	Возврат ПредопределенноеЗначение("Перечисление.оду_СостоянияОбмена.Загружен");
КонецФункции 

#КонецОбласти

#КонецОбласти

#Область  Обмен

//TODO: 
//Подумать как встроить, надстроить рабочую обработку обмена данными
Функция ОбработкаОбменаДанных(ПОД = "", РежимОтладки = Ложь, ПутьКПОД = "") Экспорт 
	
	Если РежимОтладки = Ложь Тогда
		ОбработкаОбменаДанных = Обработки.оду_УниверсальныйОбменДаннымиXML.Создать();
	Иначе
		//TODO:  
		ПолныйПуть = "\\pivo.local\Resource\Личные\Кириллов ПС\r\work\оду_УниверсальныйОбменДаннымиXML.epf";
		ОбработкаОбменаДанных = пр_Общий.ПолучитьВнешнююОбработкуПоПути(ПолныйПуть);
	КонецЕсли; 
	
	Если ПОД = "" Тогда //Режим загрузки
		Возврат ОбработкаОбменаДанных;
	КонецЕсли; 
	
	ТекстСообщения = "";
	
	Если ТипЗнч(ПОД) = Тип("Строка") Тогда
		ОбработкаОбменаДанных.ЗагрузитьПравилаОбмена(ПОД, "Строка");
		
		Если ПутьКПОД = "" Тогда
			ПутьКПОД = "УОД.xml";
		КонецЕсли;
		ОбработкаОбменаДанных.ИмяФайлаПравилОбмена = ПутьКПОД;
	//ИначеЕсли ТипЗнч(ПОД) = Тип("ТекстовыйДокумент") Тогда
	//	ПОД.Записать(ОбработкаВыгрузкиДанных.ИмяФайлаПравилОбмена);
	КонецЕсли; 
	
	Если ОбработкаОбменаДанных.ФлагОшибки Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка при загрузке правил переноса данных.'");
	КонецЕсли;	
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Параметры переноса
	ОбработкаОбменаДанных.ВыгружатьТолькоРазрешенные                      	= Ложь;
	ОбработкаОбменаДанных.ФлагРежимОтладки                                	= Ложь;
	ОбработкаОбменаДанных.ВыполнитьОбменДаннымиВОптимизированномФормате   	= Истина;
	ОбработкаОбменаДанных.НепосредственноеЧтениеВИБПриемнике             		= Ложь;
	ОбработкаОбменаДанных.ВерсияПлатформыИнформационнойБазыДляПодключения 	= "V83";
	ОбработкаОбменаДанных.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
	ОбработкаОбменаДанных.ИспользоватьОтборПоДатеДляВсехОбъектов				= Ложь;
	//Доп 
	//ОбработкаОбменаДанных.Данные												= Ложь; //???
	ОбработкаОбменаДанных.ИспользоватьТранзакции								= Истина;
	ОбработкаОбменаДанных.КоличествоОбъектовНаТранзакцию						= 100;
	ОбработкаОбменаДанных.ЭтоИнтерактивныйРежим								= Ложь;
		
	МассивПравилВыгрузки = Новый Массив();
	ИзменитьДеревоПравилВыгрузки(ОбработкаОбменаДанных.ТаблицаПравилВыгрузки.Строки, , "УниверсальноеПВД", МассивПравилВыгрузки);
	
	//Передается массив структур (ИмяТипаСсылки и Массив по этому типу)
	ОбработкаОбменаДанных.Комментарий = "оду_ВыгрузкаИзРегистрации";
	
	СтруктураДанных = Новый Структура("ТекущаяСтрокаПравилаВыгрузки, СоответвиеПараметровВыгрузки, ТаблицаСостоянийОбмена",
										МассивПравилВыгрузки[0], Неопределено, Неопределено); 
	ОбработкаОбменаДанных.Данные = СтруктураДанных;
	
	Возврат ОбработкаОбменаДанных;
	
КонецФункции 

Процедура ИзменитьДеревоПравилВыгрузки(СтрокиИсходногоДерева, РодительПВД = "", ИмяПВД, МассивПравилВыгрузки)
	
	Для Каждого СтрокаИсходногоДерева Из СтрокиИсходногоДерева Цикл
		
		Если СтрокаИсходногоДерева.Имя = РодительПВД Тогда
			СтрокаИсходногоДерева.Включить = 2;
		ИначеЕсли  СтрокаИсходногоДерева.Имя = ИмяПВД Тогда	
			СтрокаИсходногоДерева.Включить = 1;
			МассивПравилВыгрузки.Добавить(СтрокаИсходногоДерева);
		Иначе 
			СтрокаИсходногоДерева.Включить = 0;
		КонецЕсли;
		
		Если СтрокаИсходногоДерева.Строки.Количество() > 0 Тогда
			ИзменитьДеревоПравилВыгрузки(СтрокаИсходногоДерева.Строки, РодительПВД, ИмяПВД, МассивПравилВыгрузки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Участником регистрации может быть только Рабочие базы,
//Самолетом с рабочей можено выгружать в любую, из тестовых - только в тестовые
Функция МассивУчастниковОбменаПоТипуОбъекта(ТипXML) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбменаСостав.Ссылка КАК БазаПриемник,
		|	ЕСТЬNULL(оду_НастройкиУчастниковОбмена.НастройкиРегистрации, """") КАК НастройкаРегистрации,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА оду_НастройкиУчастниковОбмена.РежимОтладки = ИСТИНА
		|				ТОГДА ВЫБОР
		|						КОГДА оду_НастройкиУчастниковОбмена.ИспользоватьОбработкуБСП = ИСТИНА
		|							ТОГДА оду_НастройкиУчастниковОбмена.ОбработкаОтладкиБСП
		|						ИНАЧЕ оду_НастройкиУчастниковОбмена.ПутьКОбработкиОтладки
		|					КОНЕЦ
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ОбработкаОтладки,
		|	оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	оду_БазыУчастникиОбменаСостав.Ссылка.ИДБазы КАК ИДБазыПриемник,
		|	оду_БазыУчастникиОбменаСостав.Ссылка.ИДКонфигурации КАК ИДКонфигурации,
		|	оду_БазыУчастникиОбменаСостав.Ссылка.ЭтоРабочаяБД КАК ЭтоРабочаяБД,
		|	оду_БазыУчастникиОбменаСостав.НомерСтроки КАК ПриоритетОбъекта,
		|	оду_БазыУчастникиОбменаСостав.Объект.Родитель.Наименование КАК МетаданныеНаименование,
		|	оду_НастройкиУчастниковОбмена.ПриоритетОбмена КАК ПриоритетОбмена
		|ПОМЕСТИТЬ ВТ_Настройки
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_НастройкиУчастниковОбмена КАК оду_НастройкиУчастниковОбмена
		|		ПО оду_БазыУчастникиОбменаСостав.Ссылка = оду_НастройкиУчастниковОбмена.БазаДанных
		|ГДЕ
		|	оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника = &ТипXML
		|	И оду_БазыУчастникиОбменаСостав.Регистрировать = ИСТИНА
		|	И оду_БазыУчастникиОбменаСостав.Ссылка.ТекущаяБД = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Настройки.БазаПриемник КАК БазаПриемник,
		|	ВТ_Настройки.НастройкаРегистрации КАК НастройкаРегистрации,
		|	ВТ_Настройки.ОбработкаОтладки КАК ОбработкаОтладки,
		|	ВТ_Настройки.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ВТ_Настройки.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ВТ_Настройки.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ВТ_Настройки.ИДКонфигурации КАК ИДКонфигурации,
		|	ВТ_Настройки.ЭтоРабочаяБД КАК ЭтоРабочаяБД,
		|	ЕСТЬNULL(ТекущаяБД.ЭтоРабочаяБД, НЕОПРЕДЕЛЕНО) КАК ТекущаяБДРабочая,
		|	ВТ_Настройки.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ВТ_Настройки.МетаданныеНаименование КАК МетаданныеНаименование,
		|	ВТ_Настройки.ПриоритетОбмена КАК ПриоритетОбмена,
		|	ТекущаяБД.КоличествоОбъектовВПакетеОбмена КАК КоличествоОбъектовВПакетеОбмена,
		|	ТекущаяБД.КоличествоПопытокПриОшибке КАК КоличествоПопытокПриОшибке,
		|	ТекущаяБД.ИДКонфигурации КАК ИДКонфигурацииТекущейБД
		|ИЗ
		|	ВТ_Настройки КАК ВТ_Настройки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			оду_БазыУчастникиОбмена.Ссылка КАК Ссылка,
		|			оду_БазыУчастникиОбмена.ЭтоРабочаяБД КАК ЭтоРабочаяБД,
		|			оду_НастройкиИнформационнойБазы.КоличествоОбъектовВПакетеОбмена КАК КоличествоОбъектовВПакетеОбмена,
		|			оду_НастройкиИнформационнойБазы.КоличествоПопытокПриОшибке КАК КоличествоПопытокПриОшибке,
		|			оду_БазыУчастникиОбмена.ИДКонфигурации КАК ИДКонфигурации
		|		ИЗ
		|			РегистрСведений.оду_НастройкиИнформационнойБазы КАК оду_НастройкиИнформационнойБазы
		|				ПОЛНОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|				ПО (ИСТИНА)
		|		ГДЕ
		|			оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА) КАК ТекущаяБД
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ_Настройки.ЭтоРабочаяБД = ИСТИНА
		|					И ЕСТЬNULL(ТекущаяБД.ЭтоРабочаяБД, ЛОЖЬ) = ЛОЖЬ
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетОбмена";
	
	Запрос.УстановитьПараметр("ТипXML", ТипXML);
	
	РЗ = Запрос.Выполнить();
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("пр_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	Возврат Модуль.МассивСтруктурПоЗапросу(РЗ); 
	
КонецФункции 

Функция МассивУчастниковОбменаПоТипуОбъектаСамолет(ТипXML) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбменаСостав.Ссылка КАК БазаПриемник,
		|	ЕСТЬNULL(оду_НастройкиУчастниковОбмена.НастройкиРегистрации, """") КАК НастройкаРегистрации,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА оду_НастройкиУчастниковОбмена.РежимОтладки = ИСТИНА
		|				ТОГДА ВЫБОР
		|						КОГДА оду_НастройкиУчастниковОбмена.ИспользоватьОбработкуБСП = ИСТИНА
		|							ТОГДА оду_НастройкиУчастниковОбмена.ОбработкаОтладкиБСП
		|						ИНАЧЕ оду_НастройкиУчастниковОбмена.ПутьКОбработкиОтладки
		|					КОНЕЦ
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ОбработкаОтладки,
		|	оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	оду_БазыУчастникиОбменаСостав.Ссылка.ИДБазы КАК ИДБазыПриемник,
		|	оду_БазыУчастникиОбменаСостав.Ссылка.ИДКонфигурации КАК ИДКонфигурации,
		|	оду_БазыУчастникиОбменаСостав.Ссылка.ЭтоРабочаяБД КАК ЭтоРабочаяБД,
		|	оду_БазыУчастникиОбменаСостав.НомерСтроки КАК ПриоритетОбъекта,
		|	оду_БазыУчастникиОбменаСостав.Объект.Родитель.Наименование КАК МетаданныеНаименование
		|ПОМЕСТИТЬ ВТ_Настройки
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_НастройкиУчастниковОбмена КАК оду_НастройкиУчастниковОбмена
		|		ПО оду_БазыУчастникиОбменаСостав.Ссылка = оду_НастройкиУчастниковОбмена.БазаДанных
		|ГДЕ
		|	оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника = &ТипXML
		|	И оду_БазыУчастникиОбменаСостав.Ссылка.ТекущаяБД = ЛОЖЬ
		|	И оду_БазыУчастникиОбменаСостав.ИспользоватьСамолет = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Настройки.БазаПриемник КАК БазаПриемник,
		|	ВТ_Настройки.НастройкаРегистрации КАК НастройкаРегистрации,
		|	ВТ_Настройки.ОбработкаОтладки КАК ОбработкаОтладки,
		|	ВТ_Настройки.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ВТ_Настройки.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ВТ_Настройки.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ВТ_Настройки.ИДКонфигурации КАК ИДКонфигурации,
		|	ВТ_Настройки.ЭтоРабочаяБД КАК ЭтоРабочаяБД,
		|	ЕСТЬNULL(ТекущаяБД.ЭтоРабочаяБД, НЕОПРЕДЕЛЕНО) КАК ТекущаяБДРабочая,
		|	ВТ_Настройки.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ВТ_Настройки.МетаданныеНаименование КАК МетаданныеНаименование
		|ИЗ
		|	ВТ_Настройки КАК ВТ_Настройки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			оду_БазыУчастникиОбмена.Ссылка КАК Ссылка,
		|			оду_БазыУчастникиОбмена.ЭтоРабочаяБД КАК ЭтоРабочаяБД
		|		ИЗ
		|			Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ГДЕ
		|			оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА) КАК ТекущаяБД
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ_Настройки.ЭтоРабочаяБД = ИСТИНА
		|					И ЕСТЬNULL(ТекущаяБД.ЭтоРабочаяБД, ЛОЖЬ) = ЛОЖЬ
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ТипXML", ТипXML);
	
	РЗ = Запрос.Выполнить();
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("пр_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	Возврат Модуль.МассивСтруктурПоЗапросу(РЗ); 
	
КонецФункции 

Функция ПриоритетОбъектаОбмена(ТипXML, ПризнакПриоритета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_НастрокаПриоритетаОбъектаОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта
		|ИЗ
		|	РегистрСведений.оду_НастрокаПриоритетаОбъектаОбмена КАК оду_НастрокаПриоритетаОбъектаОбмена
		|ГДЕ
		|	оду_НастрокаПриоритетаОбъектаОбмена.ТипXML = &ТипXML
		|	И оду_НастрокаПриоритетаОбъектаОбмена.ПризнакПриоритета = &ПризнакПриоритета";
	
	Запрос.УстановитьПараметр("ТипXML", ТипXML);
	Запрос.УстановитьПараметр("ПризнакПриоритета", ПризнакПриоритета);
	
	РЗ = Запрос.Выполнить();
	
	Если РЗ.Пустой() Тогда
		Возврат 999999;
	КонецЕсли; 
	
	ВДЗ = РЗ.Выбрать();
	
	Если ВДЗ.Следующий() Тогда
		Возврат ВДЗ.ПриоритетОбъекта;
	КонецЕсли; 
	
КонецФункции 

Функция ДанныеОбУчастникахОбмена()	Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_НастройкиУчастниковОбмена.БазаДанных КАК БазаДанных,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.ИДБазы КАК ИДБазыПриемник,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Код КАК ИмяБазыПриемника,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Код КАК ИмяБазыУО,
		|	оду_НастройкиУчастниковОбмена.ПОД КАК ПОД,
		|	оду_НастройкиУчастниковОбмена.ПутьКПОД КАК ПутьКПОД,
		|	оду_НастройкиУчастниковОбмена.ПОДИзФайла КАК ПОДИзФайла,
		|	оду_НастройкиУчастниковОбмена.ПОДИзОбработкиБСП КАК ПОДИзОбработкиБСП,
		|	оду_НастройкиУчастниковОбмена.РежимОтладки КАК РежимОтладки,
		|	оду_НастройкиУчастниковОбмена.ПутьКОбработкиОтладки КАК ПутьКОбработкиОтладки,
		|	оду_НастройкиУчастниковОбмена.ИспользоватьОбработкуБСП КАК ИспользоватьОбработкуБСП,
		|	оду_НастройкиУчастниковОбмена.ОбработкаОтладкиБСП КАК ОбработкаОтладкиБСП,
		|	оду_НастройкиУчастниковОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.ЭтоРабочаяБД КАК ЭтоРабочаяБД,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Сервер КАК Сервер,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Порт КАК Порт,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Пользователь КАК Пользователь,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Пароль КАК Пароль,
		|	""/hs/universalExchange/"" КАК ПутьКСервисуHTTP,
		|	ТекущаяБД.КоличествоОбъектовВПакетеОбмена КАК КоличествоОбъектовВПакетеОбмена,
		|	ТекущаяБД.КоличествоПопытокПриОшибке КАК КоличествоПопытокПриОшибке,
		|	ТекущаяБД.КаталогОбмена КАК КаталогОбмена
		|ИЗ
		|	РегистрСведений.оду_НастройкиУчастниковОбмена КАК оду_НастройкиУчастниковОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			оду_БазыУчастникиОбмена.Ссылка КАК Ссылка,
		|			оду_БазыУчастникиОбмена.ЭтоРабочаяБД КАК ЭтоРабочаяБД,
		|			оду_НастройкиИнформационнойБазы.КоличествоОбъектовВПакетеОбмена КАК КоличествоОбъектовВПакетеОбмена,
		|			оду_НастройкиИнформационнойБазы.КоличествоПопытокПриОшибке КАК КоличествоПопытокПриОшибке,
		|			оду_НастройкиИнформационнойБазы.КаталогОбмена КАК КаталогОбмена,
		|			оду_НастройкиИнформационнойБазы.РежимОтладки КАК РежимОтладки,
		|			оду_НастройкиИнформационнойБазы.ПутьКОбработкамОтладки КАК ПутьКОбработкамОтладки
		|		ИЗ
		|			РегистрСведений.оду_НастройкиИнформационнойБазы КАК оду_НастройкиИнформационнойБазы
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|				ПО оду_НастройкиИнформационнойБазы.БазаДанных = оду_БазыУчастникиОбмена.Ссылка
		|		ГДЕ
		|			оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА) КАК ТекущаяБД
		|		ПО (ИСТИНА)
		|ГДЕ
		|	оду_НастройкиУчастниковОбмена.БазаДанных.ТекущаяБД = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА оду_НастройкиУчастниковОбмена.БазаДанных.ЭтоРабочаяБД = ИСТИНА
		|					И ЕСТЬNULL(ТекущаяБД.ЭтоРабочаяБД, ЛОЖЬ) = ЛОЖЬ
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И оду_НастройкиУчастниковОбмена.Используется = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетОбмена";
	
	РЗ = Запрос.Выполнить();
	
	//ВыборкаУО = РезультатЗапроса.Выбрать();
	//Возврат ВыборкаУО;
	Возврат пр_Общий.МассивСтруктурПоЗапросу(РЗ); 
	
КонецФункции 

Функция НастройкиЛогированияТелеграм()  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_НастройкиИнформационнойБазы.Логировать КАК Логировать,
		|	оду_НастройкиИнформационнойБазы.chat_id КАК chat_id,
		|	оду_НастройкиИнформационнойБазы.token КАК token
		|ИЗ
		|	РегистрСведений.оду_НастройкиИнформационнойБазы КАК оду_НастройкиИнформационнойБазы
		|ГДЕ
		|	оду_НастройкиИнформационнойБазы.chat_id <> """"
		|	И оду_НастройкиИнформационнойБазы.token <> """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат пр_Общий.СтруктураПоЗапросу(РезультатЗапроса);
	
КонецФункции 

Функция ПараметрыПодключенияУО()	Экспорт 
	
	ПараметрыПодключения = Новый Структура("Сервер, Порт, Пользователь, Пароль, ИмяБазыПриемника, ПутьКСервисуHTTP, ИДБазыПриемник, ИмяБазыУО");
	ПараметрыПодключения.ПутьКСервисуHTTP = "/hs/universalExchange/";
	
	Возврат ПараметрыПодключения;
	
КонецФункции 

//TODO:  Удалить?
//УО - Ссылка - оду_БазыУчастникиОбмена
Функция ПараметрыПодключенияПоСсылкеУО(СсылкаУО)	Экспорт 
	
	Если НЕ ЗначениеЗаполнено(СсылкаУО)  Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Сервер КАК Сервер,
		|	оду_БазыУчастникиОбмена.Порт КАК Порт,
		|	оду_БазыУчастникиОбмена.Пользователь КАК Пользователь,
		|	оду_БазыУчастникиОбмена.Пароль КАК Пароль,
		|	оду_БазыУчастникиОбмена.Код КАК ИмяБазыПриемника,
		|	оду_БазыУчастникиОбмена.Код КАК ИмяБазыУО,
		|	""/hs/universalExchange/"" КАК ПутьКСервисуHTTP,
		|	оду_БазыУчастникиОбмена.ИДБазы КАК ИДБазыПриемник
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Ссылка = &Ссылка
		|	И оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаУО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	Если ВДЗ.Следующий() Тогда
		ПараметрыПодключения = ПараметрыПодключенияУО();
		ЗаполнитьЗначенияСвойств(ПараметрыПодключения, ВДЗ); 
	КонецЕсли; 
		
	Возврат ПараметрыПодключения;
	
КонецФункции 

#КонецОбласти
