
#Область ОбработчикиПодписокНаСобытия

Процедура РегистрацияДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	оду_ИспользоватьУниверсальныйОбмен = оду_ИспользоватьУниверсальныйОбмен();
	Если НЕ оду_ИспользоватьУниверсальныйОбмен ИЛИ Отказ = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	РегистрироватьИсточникОбмена = РегистрироватьИсточникОбмена(Источник);
	Если РегистрироватьИсточникОбмена = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	Если Источник.Дата < Дата("20210101") Тогда
		Возврат;
	КонецЕсли; 
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	Модуль.ЗарегистрироватьИзменениеДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура РегистрацияОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	оду_ИспользоватьУниверсальныйОбмен = оду_ИспользоватьУниверсальныйОбмен();
	Если НЕ оду_ИспользоватьУниверсальныйОбмен ИЛИ Отказ = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	РегистрироватьИсточникОбмена = РегистрироватьИсточникОбмена(Источник);
	Если РегистрироватьИсточникОбмена = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	Модуль.ПроведениеДокументовОбработкаПроведения(Источник, Отказ, РежимПроведения);
	
КонецПроцедуры

//Справочники, ПВХ
Процедура РегистрацияПередЗаписью(Источник, Отказ) Экспорт
	
	оду_ИспользоватьУниверсальныйОбмен = оду_ИспользоватьУниверсальныйОбмен();
	Если НЕ оду_ИспользоватьУниверсальныйОбмен ИЛИ Отказ = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	РегистрироватьИсточникОбмена = РегистрироватьИсточникОбмена(Источник);
	Если РегистрироватьИсточникОбмена = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	Модуль.ЗарегистрироватьИзменениеПередЗаписью(Источник, Отказ);
		
КонецПроцедуры

Процедура РегистрацияПередУдалением(Источник, Отказ) Экспорт
	
	оду_ИспользоватьУниверсальныйОбмен = оду_ИспользоватьУниверсальныйОбмен();
	Если НЕ оду_ИспользоватьУниверсальныйОбмен ИЛИ Отказ = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	РегистрироватьИсточникОбмена = РегистрироватьИсточникОбмена(Источник);
	Если РегистрироватьИсточникОбмена = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	Модуль.ЗарегистрироватьУдалениеПередУдалением(Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти   
 
#Область  ПрограммныйИнтерфейс

//В случае копии базы переписать текущие базы
Процедура ПроверкаУзловОбмена()	Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК ТекущаяБД,
		|	&СерверИБ КАК Сервер,
		|	&ИмяИБ КАК Код
		|ПОМЕСТИТЬ ВТ_НачальныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТекущиеДанные.ТекущаяБД КАК ТекущаяБД,
		|	ВТ_ТекущиеДанные.Сервер КАК Сервер,
		|	ВТ_ТекущиеДанные.Код КАК Код,
		|	оду_НастройкиИнформационнойБазы.ИмяРабочейБД ЕСТЬ НЕ NULL  КАК ЭтоРабочаяБД
		|ПОМЕСТИТЬ ВТ_ТекущиеДанные
		|ИЗ
		|	ВТ_НачальныеДанные КАК ВТ_ТекущиеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_НастройкиИнформационнойБазы КАК оду_НастройкиИнформационнойБазы
		|		ПО ВТ_ТекущиеДанные.Код = оду_НастройкиИнформационнойБазы.ИмяРабочейБД
		|			И ВТ_ТекущиеДанные.Сервер = оду_НастройкиИнформационнойБазы.СерверРабочейБД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка КАК Ссылка,
		|	ЛОЖЬ КАК ТекущаяБД,
		|	оду_БазыУчастникиОбмена.ТекущаяБД КАК ТекущаяБД_Было,
		|	ВТ_ТекущиеДанные.ЭтоРабочаяБД КАК ЭтоРабочаяБД,
		|	оду_БазыУчастникиОбмена.Сервер КАК Сервер,
		|	оду_БазыУчастникиОбмена.Код КАК Код,
		|	оду_БазыУчастникиОбмена.Порт КАК Порт
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеДанные КАК ВТ_ТекущиеДанные
		|		ПО оду_БазыУчастникиОбмена.Сервер <> ВТ_ТекущиеДанные.Сервер
		|			И оду_БазыУчастникиОбмена.Код <> ВТ_ТекущиеДанные.Код
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА
		|	И ВТ_ТекущиеДанные.ЭтоРабочаяБД ЕСТЬ НЕ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка,
		|	ИСТИНА,
		|	оду_БазыУчастникиОбмена.ТекущаяБД,
		|	ВТ_ТекущиеДанные.ЭтоРабочаяБД,
		|	оду_БазыУчастникиОбмена.Сервер,
		|	оду_БазыУчастникиОбмена.Код,
		|	оду_БазыУчастникиОбмена.Порт
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеДанные КАК ВТ_ТекущиеДанные
		|		ПО оду_БазыУчастникиОбмена.Сервер = ВТ_ТекущиеДанные.Сервер
		|			И оду_БазыУчастникиОбмена.Код = ВТ_ТекущиеДанные.Код
		|ГДЕ
		|	(оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА
		|				И ВТ_ТекущиеДанные.ЭтоРабочаяБД <> оду_БазыУчастникиОбмена.ЭтоРабочаяБД
		|			ИЛИ ВТ_ТекущиеДанные.ТекущаяБД = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	ВТ_ТекущиеДанные.ТекущаяБД,
		|	НЕОПРЕДЕЛЕНО,
		|	ВТ_ТекущиеДанные.ЭтоРабочаяБД,
		|	ВТ_ТекущиеДанные.Сервер,
		|	ВТ_ТекущиеДанные.Код,
		|	оду_БазыУчастникиОбмена.Порт
		|ИЗ
		|	ВТ_ТекущиеДанные КАК ВТ_ТекущиеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ПО ВТ_ТекущиеДанные.Сервер = оду_БазыУчастникиОбмена.Сервер
		|			И ВТ_ТекущиеДанные.Код = оду_БазыУчастникиОбмена.Код
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Ссылка ЕСТЬ NULL";
	
	СтруктураИБ = пр_Общий.ПолучитьСтруктуруАдресаИнформационнойБазы();
	Запрос.УстановитьПараметр("ИмяИБ", СтруктураИБ.ИмяИБ);
	Запрос.УстановитьПараметр("СерверИБ", СтруктураИБ.СерверИБ);
	//Запрос.УстановитьПараметр("ЭтоРабочаяБД", СтруктураИБ.ЭтоРабочаяБД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	Пока ВДЗ.Следующий() Цикл
		
		ЭтоНовыйУчастник = Ложь;
		Если ЗначениеЗаполнено(ВДЗ.Ссылка)  Тогда
			УзелОбъект = ВДЗ.Ссылка.ПолучитьОбъект();
		Иначе
			УзелОбъект = Справочники.оду_БазыУчастникиОбмена.СоздатьЭлемент();
			ИД = Новый УникальныйИдентификатор;
			СсылкаНов = Справочники.оду_БазыУчастникиОбмена.ПолучитьСсылку(ИД);
			УзелОбъект.ИДБазы = ИД;
			УзелОбъект.УстановитьСсылкуНового(СсылкаНов);
			ЗаполнитьЗначенияСвойств(УзелОбъект, ВДЗ);
			ЭтоНовыйУчастник = Истина;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(УзелОбъект.Порт) Тогда 
			УзелОбъект.Порт = 80; // По умолчанию
		КонецЕсли;	
		
		УзелОбъект.ИДКонфигурации = пр_Общий.ИДКонфигурации();
		УзелОбъект.ТекущаяБД = ВДЗ.ТекущаяБД;
		УзелОбъект.ЭтоРабочаяБД = ВДЗ.ЭтоРабочаяБД;
		УзелОбъект.ОбменДанными.Загрузка = Истина;
		
		ДанныеПользователя = СоздатьСлужебногоПользователяДляРаботыСОбменом();
		Если ДанныеПользователя <> Неопределено Тогда
			УзелОбъект.Пользователь = ДанныеПользователя.Пользователь; 	
			УзелОбъект.Пароль 		= ДанныеПользователя.Пароль; 	
		КонецЕсли; 
		
		УзелОбъект.Записать();
		
		Если ЭтоНовыйУчастник = Истина Тогда
			Запись = РегистрыСведений.оду_НастройкиУчастниковОбмена.СоздатьМенеджерЗаписи();
			Запись.БазаДанных = СсылкаНов;
		    Запись.Записать();
		КонецЕсли; 
		
	КонецЦикла
	
КонецПроцедуры

//TODO:  Доработка возврата пароля
Функция СоздатьСлужебногоПользователяДляРаботыСОбменом() Экспорт
	
	ДанныеПользователя = Новый Структура("Пользователь, Пароль", Неопределено, ""); 
	
	УстановитьПривилегированныйРежим(Истина);
	//Если ОбщегоНазначения.РазделениеВключено()
	//	И НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
	//	Возврат ДанныеПользователя;
	//КонецЕсли;
	
	Логин = "uExchange";
	//Пароль = "exchange-a9a7-405f-a5df-19e734c712c7";
	Пароль = "exc-a9a7";
	ИдентификаторПользователяИБ = "7e7c7c77-1a0d-4a5d-b8d3-777cd57c7777";
	
	ПользовательИзСправочника = Пользователи.НайтиПоИмени(Логин);
	
	Если ПользовательИзСправочника <> Неопределено Тогда
		//ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВДЗ.ИдентификаторПользователяИБ);
		//Пароль = ПользовательИБ.СохраняемоеЗначениеПароля();
		ДанныеПользователя.Пользователь = ПользовательИзСправочника;
		ДанныеПользователя.Пароль = Пароль;
		Возврат ДанныеПользователя;
		
	КонецЕсли;
	
	Попытка
		
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Имя = Логин;
		ОписаниеПользователяИБ.ПолноеИмя = НСтр("ru='uExchange'");
		ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Истина);
		ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
		ОписаниеПользователяИБ.Пароль = Пароль;
		
		Роли = Новый Массив;
		Роли.Добавить("АдминистраторСистемы");
		Роли.Добавить("ПолныеПрава");
		Роли.Добавить("оду_Администрирование");
		ОписаниеПользователяИБ.Роли = Роли;
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		УИД = Новый УникальныйИдентификатор(ИдентификаторПользователяИБ);
		СсылкаНовПользователя = Справочники.Пользователи.ПолучитьСсылку(УИД);
		НовыйПользователь.УстановитьСсылкуНового(СсылкаНовПользователя);
		НовыйПользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
		НовыйПользователь.Служебный = Истина;
		НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		НовыйПользователь.Записать();
		
		ДанныеПользователя.Пользователь = СсылкаНовПользователя;
		ДанныеПользователя.Пароль = Пароль;
		
		Возврат  ДанныеПользователя;
		
	Исключение
		
		МетаданныеОбъекта = Метаданные.Справочники.Пользователи;
		ТекстОшибки = НСтр("ru = 'Не удалось создать служебного пользователя по причине:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта,, ТекстОшибки);
		ТекстСообщения = НСтр("ru = 'При создании служебного пользователя для получения уведомлений от сервиса ЭДО произошла ошибка: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат ДанныеПользователя;
	
КонецФункции

//Для создание нового УО
Функция СтруктураДанныхЭтойБазы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Код КАК Код,
		|	оду_БазыУчастникиОбмена.ИДБазы КАК ИДБазы,
		|	оду_БазыУчастникиОбмена.ТекущаяБД КАК ТекущаяБД,
		|	оду_БазыУчастникиОбмена.ЭтоРабочаяБД КАК ЭтоРабочаяБД,
		|	оду_БазыУчастникиОбмена.Сервер КАК Сервер,
		|	оду_БазыУчастникиОбмена.Порт КАК Порт,
		|	оду_БазыУчастникиОбмена.Пользователь КАК Пользователь,
		|	оду_БазыУчастникиОбмена.Пароль КАК Пароль,
		|	оду_БазыУчастникиОбмена.ИспользоватьПоддержкуРавныхОстатков КАК ИспользоватьПоддержкуРавныхОстатков,
		//|	оду_БазыУчастникиОбмена.ТипXMLОбъектаИсточникаКонтраляОстатков КАК ТипXMLОбъектаИсточникаКонтраляОстатков,
		//|	оду_БазыУчастникиОбмена.ТипXMLОбъектаПриемникаКонтраляОстатков КАК ТипXMLОбъектаПриемникаКонтраляОстатков,
		|	оду_БазыУчастникиОбмена.ИДКонфигурации КАК ИДКонфигурации
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА";
	
	РЗ = Запрос.Выполнить();
	
	Если РЗ.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Модуль_Разработка = пр_НастройкиПовтИсп.ИсполняемыйМодуль("пр_Общий", пр_НастройкиПовтИсп.ТекущийПользователь());
	Данные = Модуль_Разработка.СтруктураПоЗапросу(РЗ);
	Возврат Данные;
	
КонецФункции 

Функция РезультатЗаписиОшибкиОбмена(СтруктураПараметровЗаписиОшибки, Удалить = Ложь, ОбъектОбмена = Неопределено)   Экспорт
	
	Попытка
		
		Запись = РегистрыСведений.оду_ОшибкиОбмена.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, СтруктураПараметровЗаписиОшибки); 
		Если Удалить = Истина Тогда
			Запись.Прочитать();
			Запись.Удалить();
		Иначе
			Если ОбъектОбмена <> Неопределено Тогда
				Если ЗначениеЗаполнено(ОбъектОбмена)  Тогда
					Запись.ОбъектОбмена = ОбъектОбмена.Ссылка;
				ИначеЕсли Запись.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка() И ЗначениеЗаполнено(Запись.ТипXMLОбъектаИсточника)  Тогда
					Запись.ОбъектОбмена = пр_Общий.СсылкаПоТипXML(Запись.ТипXMLОбъектаИсточника, Запись.ИДОбъекта);
				ИначеЕсли  Запись.РежимОбмена = оду_ОбщийПовтИсп.РежимЗагрузка() И ЗначениеЗаполнено(Запись.ТипXMLОбъектаПриемника) Тогда 	
					Запись.ОбъектОбмена = пр_Общий.СсылкаПоТипXML(Запись.ТипXMLОбъектаПриемника, Запись.ИДОбъекта);
				КонецЕсли; 
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(Запись.Период)  Тогда
				Запись.Период = ТекущаяДатаСеанса();
			КонецЕсли; 
			Запись.Записать();
		КонецЕсли; 
		
		Возврат Истина;
		
	Исключение
		Если ЗначениеЗаполнено(СтруктураПараметровЗаписиОшибки.ИмяФайлаОбмена)  Тогда
			УдалитьФайлы(СтруктураПараметровЗаписиОшибки.ИмяФайлаОбмена);
		КонецЕсли; 	
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции 

Функция оду_ИспользоватьУниверсальныйОбмен()	Экспорт
	оду_ИспользоватьУниверсальныйОбмен = ПолучитьФункциональнуюОпцию("оду_ИспользоватьУниверсальныйОбмен");
	Возврат  оду_ИспользоватьУниверсальныйОбмен;
КонецФункции

//Стандартные действия 
//Признак из КД 21
Функция РегистрироватьИсточникОбмена(Источник) Экспорт
	
	ЭтоЗагрузка = Источник.ОбменДанными.Загрузка;
	Если ЭтоЗагрузка = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоОбмен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства,"ЭтоОбмен", Ложь);
	Возврат НЕ ЭтоОбмен;

КонецФункции

Функция оду_РезультатЗаписиОшибкиОбработкиУОД(оду_ТаблицаСостоянийОбмена, Объект = Неопределено, СтрокаСообщенияОбОшибке, ОшибкаВПВД = Ложь)  Экспорт
	
	Попытка
		
		ОтправитьСообщениеВТелеграмExchange("УниверсальныйОбменДаннымиXML", Объект, СтрокаСообщенияОбОшибке);	
		
		Если Объект <> Неопределено Тогда
			
			оду_ИДОбъекта = XMLСтрока(Объект);
			оду_МСтр = оду_ТаблицаСостоянийОбмена.НайтиСтроки(Новый Структура("ИДОбъекта", оду_ИДОбъекта));
			
			Если оду_МСтр.Количество() > 0 Тогда
				
				оду_Стр	= оду_МСтр[0];
				Если ОшибкаВПВД = Истина Тогда
					оду_МСтрМетаданных = оду_ТаблицаСостоянийОбмена.НайтиСтроки(Новый Структура("ТипXMLОбъектаИсточника", оду_Стр.ТипXMLОбъектаИсточника));
					Для каждого Нстр Из оду_МСтрМетаданных Цикл
						Нстр.ОписаниеОшибки = СтрокаСообщенияОбОшибке;
						Нстр.Обработан = Истина;
						Нстр.НомерПопытки = Нстр.НомерПопытки;
						Результат = РезультатЗаписиОшибкиОбмена(Нстр);
					КонецЦикла; 
				Иначе	
					оду_Стр.ОписаниеОшибки = СтрокаСообщенияОбОшибке;
					оду_Стр.Обработан = Истина;
					Результат = РезультатЗаписиОшибкиОбмена(оду_Стр, , Объект);
				КонецЕсли; 
				
			Иначе
				Нстр = оду_ТаблицаСостоянийОбмена[0];	
				Нстр.ОписаниеОшибки = СтрокаСообщенияОбОшибке;
				Нстр.Обработан = Истина;
				Нстр.НомерПопытки = 1;
				Результат = РезультатЗаписиОшибкиОбмена(Нстр, , Объект);
			КонецЕсли; 
			
		КонецЕсли;
		
		Возврат   Результат;
		
	Исключение
		Возврат Ложь;		
	КонецПопытки;

КонецФункции 


#КонецОбласти


#Область  HTTP_Сервис

#Область  МетодыHTTPЗапросов

Функция ping(Запрос)	Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(Строка(ТекущаяДата()));
	Возврат Ответ;
КонецФункции // ()

#Область  receiverData
 
//Передать и записать нового учасника обмена
Функция receiverData(Запрос)	Экспорт
	
	ТелоЗапроса = СтруктураИзТелаHTTPЗапросаУнив(Запрос);
	
	Попытка
				
		Результ = РезультатПроверкиЗаписиНовогоУчастникаОбмена(ТелоЗапроса);
		Если Результ = Ложь Тогда
			ОписаниеОшибки = "Не получилось записать нового участника обмена. Попытайтесь еще раз.";
			Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
			Возврат Ответ;
		//ИначеЕсли Результ = "Уже записан" Тогда 
		//	Ответ = ЗаполненныйОтветHTTP(Результ, Неопределено, 201, Истина);
		//	Возврат Ответ;
		КонецЕсли;
		
		//Отправка своих данных
		Данные = СтруктураДанныхЭтойБазы();
		Ответ = ЗаполненныйОтветHTTP(,Данные, 200);
		Возврат Ответ;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
		Возврат Ответ;
	КонецПопытки;
	
КонецФункции // ()

Функция РезультатПроверкиЗаписиНовогоУчастникаОбмена(ТелоЗапроса)  Экспорт
	
	Попытка
		
		УчастникОбмена = пр_Общий.СсылкаПоТипXML("CatalogRef.оду_БазыУчастникиОбмена", ТелоЗапроса.ИДБазы);
		Если УчастникОбмена = Неопределено Тогда
			//Запишем нового участника обмена
			ИД = Новый УникальныйИдентификатор(ТелоЗапроса.ИДБазы);
			СслыкаНов = Справочники.оду_БазыУчастникиОбмена.ПолучитьСсылку(ИД);
			СслыкаНовОб = Справочники.оду_БазыУчастникиОбмена.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(СслыкаНовОб, ТелоЗапроса); 
			СслыкаНовОб.УстановитьСсылкуНового(СслыкаНов);
			СслыкаНовОб.ТекущаяБД = Ложь;
			СслыкаНовОб.ОбменДанными.Загрузка = Истина;
			СслыкаНовОб.Записать();
			
			Запись = РегистрыСведений.оду_НастройкиУчастниковОбмена.СоздатьМенеджерЗаписи();
			Запись.БазаДанных = СслыкаНовОб.Ссылка;
		    Запись.Записать();
			
			Возврат Истина;
			
		Иначе 
			
			Возврат "Уже записан";
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции 

#КонецОбласти

#Область  exchangeStatus

//Обмен состояними обмена
Функция exchangeStatus(Запрос)	Экспорт
	
	ТелоЗапроса = СтруктураИзТелаHTTPЗапросаУнив(Запрос);
	
	Попытка
		
		СтруктураСообщенияОбмена = СтруктураСообщенияОбмена(ТелоЗапроса);
		РезультатПроверки = СтруктураСообщенияОбмена.РезультатПроверки; 
		Если ЗначениеЗаполнено(РезультатПроверки) И РезультатПроверки = Ложь Тогда
			ОписаниеОшибки = "Сообщение обмена не корректно или адрес получателя указан не верно";
			Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
			Возврат Ответ;
		КонецЕсли;
		
		Результ = РезультатОбновленияСостоянийОбмена(ТелоЗапроса);
		Если ТипЗнч(Результ) = Тип("Строка") Тогда
			Ответ = ЗаполненныйОтветHTTP(Результ, Неопределено, 201);
			Возврат Ответ;
		КонецЕсли;
		
		//Отправка своих данных
		//Данные = СтруктураДанныхЭтойБазы();
		Ответ = ЗаполненныйОтветHTTP(, Результ, 200);
		Возврат Ответ;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("exchangeStatus", , ОписаниеОшибки);	
		Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
		Возврат Ответ;
	КонецПопытки;
	
КонецФункции // ()

Функция ТекстЗапросаОбновленияСостояниямиОбмена(Источник = Ложь)
	
	ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	ТЗ.ИДОбъекта КАК ИДОбъекта,
		|	ТЗ.ИДБазыИсточник КАК ИДБазыИсточник,
		|	ТЗ.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ТЗ.РежимОбмена КАК РежимОбмена,
		|	ТЗ.СостояниеОбмена КАК СостояниеОбмена,
		|	ТЗ.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ТЗ.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ТЗ.ДатаРегистрации КАК ДатаРегистрации,
		|	ТЗ.ДатаВыгрузки КАК ДатаВыгрузки,
		|	ТЗ.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	ТЗ.ПриоритетОбмена КАК ПриоритетОбмена,
		|	ТЗ.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ТЗ.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	ТЗ.НомерПопытки КАК НомерПопытки,
		|	ТЗ.СменаИсточникаПриеменикаПриРазрешенииКоллизий КАК СменаИсточникаПриеменикаПриРазрешенииКоллизий
		|ПОМЕСТИТЬ ВТ_ДАнные
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДАнные.ИДОбъекта КАК ИДОбъекта,
		|	ВТ_ДАнные.ИДБазыИсточник КАК ИДБазыИсточник,
		|	ВТ_ДАнные.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ВТ_ДАнные.РежимОбмена КАК РежимОбмена,
		|	ВТ_ДАнные.СостояниеОбмена КАК СостояниеОбмена,
		|	ВТ_ДАнные.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ВТ_ДАнные.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ВТ_ДАнные.ДатаРегистрации КАК ДатаРегистрации,
		|	ВТ_ДАнные.ДатаВыгрузки КАК ДатаВыгрузки,
		|	ВТ_ДАнные.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	ВТ_ДАнные.ПриоритетОбмена КАК ПриоритетОбмена,
		|	ВТ_ДАнные.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ВТ_ДАнные.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	ВТ_ДАнные.НомерПопытки КАК НомерПопытки,
		|	ВТ_ДАнные.СменаИсточникаПриеменикаПриРазрешенииКоллизий КАК СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	ЕСТЬNULL(оду_РегистрацияОбъектовОбмена.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрацииОбъекта,
		|	ЕСТЬNULL(СостояниеВыгрузки.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрацииВыгрузки,
		|	ЕСТЬNULL(СостояниеВыгрузки.СостояниеОбмена, НЕОПРЕДЕЛЕНО) КАК СостояниеОбменаВыгрузки,
		|	ЕСТЬNULL(СостояниеЗагрузки.СостояниеОбмена, НЕОПРЕДЕЛЕНО) КАК СостояниеОбменаЗагрузки,
		|	ЕСТЬNULL(СостояниеЗагрузки.НомерПопытки, 0) КАК НомерПопыткиЗагрузки,
		|	ВТ_ДАнные.СостояниеОбмена = ЕСТЬNULL(СостояниеЗагрузки.СостояниеОбмена, НЕОПРЕДЕЛЕНО) КАК СостояниеНеМенялось,
		|	ЛОЖЬ КАК Удалить
		|ИЗ
		|	ВТ_ДАнные КАК ВТ_ДАнные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК СостояниеВыгрузки
		|		ПО ВТ_ДАнные.ИДОбъекта = СостояниеВыгрузки.ИДОбъекта
		|			И ВТ_ДАнные.ИДБазыИсточник = СостояниеВыгрузки.ИДБазыИсточник
		|			И ВТ_ДАнные.ИДБазыПриемник = СостояниеВыгрузки.ИДБазыПриемник
		|			И (СостояниеВыгрузки.РежимОбмена В (ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных), ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗапросСсылки), ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗапросДвижений)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК СостояниеЗагрузки
		|		ПО ВТ_ДАнные.ИДОбъекта = СостояниеЗагрузки.ИДОбъекта
		|			И ВТ_ДАнные.ИДБазыПриемник = СостояниеЗагрузки.ИДБазыПриемник
		|			И ВТ_ДАнные.ИДБазыИсточник = СостояниеЗагрузки.ИДБазыИсточник
		|			И (СостояниеЗагрузки.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|		ПО (ВТ_ДАнные.ИДОбъекта = оду_РегистрацияОбъектовОбмена.ИДОбъекта)
		|			И (ВТ_ДАнные.#СтрокаСоединения = оду_РегистрацияОбъектовОбмена.ИДБазыПриемник)
		//|ГДЕ
		// Не ообмениваться одинаковыми состояниями
		//|	ВТ_ДАнные.СостояниеОбмена <> ЕСТЬNULL(СостояниеЗагрузки.СостояниеОбмена, НЕОПРЕДЕЛЕНО) 
		//|	ВЫБОР
		//|		КОГДА ВТ_ДАнные.СостояниеОбмена = ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.РазрешениеКоллизий)
		//|			ТОГДА ИСТИНА
		//|		ИНАЧЕ ВТ_ДАнные.СостояниеОбмена <> ЕСТЬNULL(СостояниеЗагрузки.СостояниеОбмена, НЕОПРЕДЕЛЕНО)
		//|	КОНЕЦ
		|
		
		|ОБЪЕДИНИТЬ ВСЕ

		|ВЫБРАТЬ
		|	СостояниеВыгрузки.ИДОбъекта,
		|	СостояниеВыгрузки.ИДБазыИсточник,
		|	СостояниеВыгрузки.ИДБазыПриемник,
		|	СостояниеВыгрузки.РежимОбмена,
		|	СостояниеВыгрузки.СостояниеОбмена,
		|	СостояниеВыгрузки.ТипXMLОбъектаИсточника,
		|	СостояниеВыгрузки.ТипXMLОбъектаПриемника,
		|	СостояниеВыгрузки.ДатаРегистрации,
		|	СостояниеВыгрузки.ДатаВыгрузки,
		|	СостояниеВыгрузки.ИмяФайлаОбмена,
		|	СостояниеВыгрузки.ПриоритетОбмена,
		|	СостояниеВыгрузки.ПриоритетОбъекта,
		|	СостояниеВыгрузки.ПриоритетДопПризнака,
		|	СостояниеВыгрузки.НомерПопытки,
		|	СостояниеВыгрузки.СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ВТ_ДАнные КАК ВТ_ДАнные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК СостояниеВыгрузки
		|		ПО ВТ_ДАнные.ИДОбъекта = СостояниеВыгрузки.ИДОбъекта
		|			И ВТ_ДАнные.ИДБазыПриемник = СостояниеВыгрузки.ИДБазыИсточник
		|			И ВТ_ДАнные.ИДБазыИсточник = СостояниеВыгрузки.ИДБазыПриемник
		|			И (СостояниеВыгрузки.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ВыгрузкаДанных))
		|ГДЕ
		|	ВТ_ДАнные.СменаИсточникаПриеменикаПриРазрешенииКоллизий = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеВыгрузки.ИДОбъекта,
		|	СостояниеВыгрузки.ИДБазыИсточник,
		|	СостояниеВыгрузки.ИДБазыПриемник,
		|	СостояниеВыгрузки.РежимОбмена,
		|	СостояниеВыгрузки.СостояниеОбмена,
		|	СостояниеВыгрузки.ТипXMLОбъектаИсточника,
		|	СостояниеВыгрузки.ТипXMLОбъектаПриемника,
		|	СостояниеВыгрузки.ДатаРегистрации,
		|	СостояниеВыгрузки.ДатаВыгрузки,
		|	СостояниеВыгрузки.ИмяФайлаОбмена,
		|	СостояниеВыгрузки.ПриоритетОбмена,
		|	СостояниеВыгрузки.ПриоритетОбъекта,
		|	СостояниеВыгрузки.ПриоритетДопПризнака,
		|	СостояниеВыгрузки.НомерПопытки,
		|	СостояниеВыгрузки.СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК СостояниеВыгрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДАнные КАК ВТ_ДАнные
		|		ПО СостояниеВыгрузки.ИДОбъекта = ВТ_ДАнные.ИДОбъекта
		|			И СостояниеВыгрузки.ИДБазыИсточник = ВТ_ДАнные.ИДБазыИсточник
		|			И СостояниеВыгрузки.ИДБазыПриемник = ВТ_ДАнные.ИДБазыПриемник
		|ГДЕ
		|	ВТ_ДАнные.ИДОбъекта ЕСТЬ NULL
		|	И СостояниеВыгрузки.РежимОбмена В (ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных), ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗапросСсылки), ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗапросДвижений))
		|	И СостояниеВыгрузки.СостояниеОбмена В (ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.ПроверкаДанных), ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.Загружен))
		|";
		
	СтрокаСоединения = ?(Источник = Ложь, "ИДБазыИсточник", "ИДБазыПриемник");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#СтрокаСоединения", СтрокаСоединения);
	
	Возврат  ТекстЗапроса;
	
КонецФункции

Функция	ЗаполнитьТЗСостоянийОбменаИзТелаЗапроса(ТелоЗапроса)
	
	Попытка
		
		Данные = ТелоЗапроса.data;
		//Если НЕ ЗначениеЗаполнено(Данные)  Тогда
		//	Возврат Неопределено;		
		//КонецЕсли;
		//
		//Если Данные.Количество() = 0 Тогда
		//	Возврат Неопределено;		
		//КонецЕсли; 	
		
		Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь()); 
		ТЗ = Модуль.ТаблицаСостоянийОбмена(); 
		
		Если НЕ ЗначениеЗаполнено(Данные)  Тогда
			Возврат ТЗ;		
		КонецЕсли;
		
		Если Данные.Количество() = 0 Тогда
			Возврат ТЗ;		
		КонецЕсли; 	
		
		Для каждого Стр Из Данные Цикл
			
			Нстр = Тз.Добавить();
			ЗаполнитьЗначенияСвойств(Нстр, Стр); 
			
		КонецЦикла; 
		
		Возврат ТЗ;
		
	Исключение
		СтрокаСообщенияОбОшибке = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("ЗаполнитьТЗСостоянийОбменаИзТелаЗапроса", , СтрокаСообщенияОбОшибке);	
		Возврат Неопределено;		
	КонецПопытки; 
	
КонецФункции 

Функция РезультатОбновленияСостоянийОбмена(ТелоЗапроса)  Экспорт
	
	ЕстьДанныеДляЗагрузки = Ложь;
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь());
	НастройкиТекущейБД = Модуль.НастройкиТекущейБД();
	
	//Вход Выгрузка, текущая БД - приемник
	ДанныеТЗ = ЗаполнитьТЗСостоянийОбменаИзТелаЗапроса(ТелоЗапроса);
	
	//Если НЕ ЗначениеЗаполнено(ДанныеТЗ)  Тогда
	Если ДанныеТЗ = Неопределено  Тогда
		Возврат "Не удалось прочитать входящие данные на обновление состояний обмена";		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ДанныеТЗ;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
		Блокировка.Заблокировать(); 
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаОбновленияСостояниямиОбмена();
		Запрос.УстановитьПараметр("ТЗ", ДанныеТЗ);
		
		РЗ = Запрос.Выполнить();
		
		Если РЗ.Пустой() Тогда
			Возврат "Нет данных";		
		КонецЕсли;
		
		ВДЗ = РЗ.Выбрать();

		ДанныеДляИзмененийСостояний = Новый Массив;
		ДанныеОтветаСостояний = Новый Массив;
		ДанныеОтветаУдаление = Новый Массив;
		СтруктураПоОбъектуСостояний = СтруктураПоОбъектуСостояний();
		МассивЗагруженныхФайловОбмена = Новый Массив;
		
		Пока ВДЗ.Следующий() Цикл
			
			ДобавлятьЗаписьНаИзменениеСостояния = Истина;
			
			СтруктураОтвета = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураПоОбъектуСостояний));
			ЗаполнитьЗначенияСвойств(СтруктураОтвета, ВДЗ); 
			
			Если ВДЗ.РежимОбмена = оду_ОбщийПовтИсп.РежимЗагрузка() Тогда
				СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
			Иначе //Выгрузка, ЗапросСсылки, ЗапросДвижений	
				
				Если ВДЗ.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка() Тогда
					СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимЗагрузка();
				КонецЕсли;
				
				//Разрешение коллизий по последней дате
				Если ВДЗ.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеРазрешениеКоллизий() ИЛИ
					 ВДЗ.СостояниеОбменаЗагрузки = оду_ОбщийПовтИсп.СостояниеРазрешениеКоллизий() Тогда
					//TODO:  Добавить в запрос дату регистрации
					//Если ВДЗ.ДатаРегистрации < ВДЗ.ДатаРегистрацииВыгрузки Тогда
					Если ВДЗ.ДатаРегистрации < ВДЗ.ДатаРегистрацииОбъекта Тогда
						
						СтруктураОтветаУдаления = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураПоОбъектуСостояний));
						ЗаполнитьЗначенияСвойств(СтруктураОтветаУдаления, ВДЗ); 
						ДанныеОтветаУдаление.Добавить(СтруктураОтветаУдаления);
						
						СтруктураОтвета.ДатаРегистрации = ВДЗ.ДатаРегистрацииОбъекта;
						СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
						СтруктураОтвета.ИДБазыИсточник = ВДЗ.ИДБазыПриемник;
						СтруктураОтвета.ИДБазыПриемник = ВДЗ.ИДБазыИсточник;
						СтруктураОтвета.ТипXMLОбъектаИсточника = ВДЗ.ТипXMLОбъектаПриемника;
						СтруктураОтвета.ТипXMLОбъектаПриемника = ВДЗ.ТипXMLОбъектаИсточника;
						СтруктураОтвета.СменаИсточникаПриеменикаПриРазрешенииКоллизий = Истина;
						
					Иначе
						СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимЗагрузка();
					КонецЕсли; 
					СтруктураОтвета.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгрузка();
				Иначе	
					
					//Коллизии
					//Если ВДЗ.ДатаРегистрации < ВДЗ.ДатаРегистрацииВыгрузки И ВДЗ.СостояниеОбменаЗагрузки = НЕОПРЕДЕЛЕНО  Тогда
					Если ВДЗ.ДатаРегистрации < ВДЗ.ДатаРегистрацииОбъекта И ВДЗ.СостояниеОбменаЗагрузки = НЕОПРЕДЕЛЕНО  Тогда
						СтруктураОтвета.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеРазрешениеКоллизий();
					ИначеЕсли ВДЗ.СостояниеОбменаЗагрузки <> НЕОПРЕДЕЛЕНО Тогда //Загрузка
						
						Если ВДЗ.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгружен() Тогда
							//TODO:  Проверка на наличие файла, если нет - менять состояние
							СтруктураОтвета.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеЗагрузка();
							//TODO:  подумать Номер попытки загрузки/выгрузки - разделять?
							//СтруктураОтвета.НомерПопытки = 0;
							ЕстьДанныеДляЗагрузки = Истина;
						ИначеЕсли ВДЗ.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеЗагружен() Тогда
							//TODO:  Если нет в приемнике (удален) - отправлять "Загружен"
							//ДанныеОтветаУдаление.Добавить(СтруктураОтвета);
							Если ЗначениеЗаполнено(СтруктураОтвета.ИмяФайлаОбмена)  Тогда
								МассивЗагруженныхФайловОбмена.Добавить(СтруктураОтвета.ИмяФайлаОбмена);
							КонецЕсли; 
							Продолжить;
						КонецЕсли; 
						
					Иначе  //Нет записи
						//Оставляем как есть
						//СтруктураОтвета.СостояниеОбмена = ПредопределенноеЗначение("Перечисление.оду_СостоянияОбмена.РазрешениеКоллизий");
						ДобавлятьЗаписьНаИзменениеСостояния = Ложь;
					КонецЕсли; 
				
				КонецЕсли;
			КонецЕсли;
			
			Если ВДЗ.СостояниеНеМенялось = Истина Тогда
				ДанныеОтветаСостояний.Добавить(СтруктураОтвета);
				Продолжить;
			КонецЕсли; 
			
			ДанныеОтветаСостояний.Добавить(СтруктураОтвета);
			
			Если ДобавлятьЗаписьНаИзменениеСостояния = Истина Тогда
				ДанныеДляИзмененийСостояний.Добавить(СтруктураОтвета);
			КонецЕсли; 
			
		КонецЦикла;
		
		ЗаписатьСостоянияОбменаИзМассива(ДанныеДляИзмененийСостояний);
		ЗаписатьСостоянияОбменаИзМассива(ДанныеОтветаУдаление, Истина);
		
		Если МассивЗагруженныхФайловОбмена.Количество() > 0 Тогда
			МассивЗагруженныхФайловОбменаСвернутый = Новый Массив; 
			Для каждого ИмяФайлаОбмена Из МассивЗагруженныхФайловОбмена Цикл
				Если МассивЗагруженныхФайловОбменаСвернутый.Найти(ИмяФайлаОбмена) = Неопределено Тогда
					МассивЗагруженныхФайловОбменаСвернутый.Добавить(ИмяФайлаОбмена);	
				КонецЕсли; 			
			КонецЦикла; 
			
			РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла(МассивЗагруженныхФайловОбменаСвернутый);
			
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		
		Если ЕстьДанныеДляЗагрузки Тогда
			ВыполнитьОбменВФоне(оду_ОбщийПовтИсп.РежимЗагрузка(), 2);
		КонецЕсли; 
		
		Возврат  ДанныеОтветаСостояний;
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("exchangeStatus", , ОписаниеОшибки);	
		Возврат  ОписаниеОшибки;
	КонецПопытки;
	
КонецФункции 

Функция СтруктураПоОбъектуСостояний()
	
	КолонкиТЗ = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьНаборЗаписей().ВыгрузитьКолонки().Колонки;
	СтруктураПоОбъекту = Новый Структура(); 
	Для каждого Стр Из КолонкиТЗ Цикл
		СтруктураПоОбъекту.Вставить(Стр.Имя);
	КонецЦикла; 
	Возврат СтруктураПоОбъекту;
	
КонецФункции 

Процедура ЗаписатьСостоянияОбменаИзМассива(ДанныеОтветаСостояний, Удалить = Ложь)  Экспорт
	
	Для каждого Стр Из ДанныеОтветаСостояний Цикл
		//Обработка данных
		Запись = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Стр);
		Если Удалить = Ложь Тогда
			Запись.Записать();
		Иначе
			Запись.Прочитать();
			Запись.Удалить();
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаписатьСостоянияОбменаИзВыборкиЗапроса(ВДЗ, ДанныеОтветаСостояний = Неопределено, СтруктураПоОбъектуСостояний = Неопределено, ТолькоЗаписатьМассивОтвета = Ложь)
	
	ПрерватьЦикл = Ложь; 
	
	Пока ВДЗ.Следующий() И ПрерватьЦикл = Ложь Цикл
		
		Если ТолькоЗаписатьМассивОтвета = Ложь Тогда
			//Обработка данных
			Запись = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВДЗ); 
			Запись.Записать();
		КонецЕсли; 
		
		Если ДанныеОтветаСостояний <> Неопределено Тогда
			СтруктураОтвета = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураПоОбъектуСостояний));
			ЗаполнитьЗначенияСвойств(СтруктураОтвета, ВДЗ); 
			ДанныеОтветаСостояний.Добавить(СтруктураОтвета);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры
 

#КонецОбласти

#Область  exchangeStatusComplet

//Обмен завершенным состояним обмена
Функция exchangeStatusComplet(Запрос)	Экспорт
	
	ТелоЗапроса = СтруктураИзТелаHTTPЗапросаУнив(Запрос);
	
	Попытка
		
		СтруктураСообщенияОбмена = СтруктураСообщенияОбмена(ТелоЗапроса);
		РезультатПроверки = СтруктураСообщенияОбмена.РезультатПроверки; 
		Если ЗначениеЗаполнено(РезультатПроверки) И РезультатПроверки = Ложь Тогда
			ОписаниеОшибки = "Сообщение обмена не корректно или адрес получателя указан не верно";
			Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
			Возврат Ответ;
		КонецЕсли;
		
		РезультатОчисткиЗаписей = РезультатExchangeStatusComplet(ТелоЗапроса);
		
		Если ТипЗнч(РезультатОчисткиЗаписей) = Тип("Строка") Тогда
			Ответ = ЗаполненныйОтветHTTP(РезультатОчисткиЗаписей, Неопределено, 201);
			Возврат Ответ;
		КонецЕсли;
		
		//Отправка своих данных
		//Данные = СтруктураДанныхЭтойБазы();
		Ответ = ЗаполненныйОтветHTTP(, РезультатОчисткиЗаписей, 200);
		Возврат Ответ;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("exchangeStatus", , ОписаниеОшибки);	
		Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
		Возврат Ответ;
	КонецПопытки;
	
КонецФункции // ()

Функция РезультатExchangeStatusComplet(ТелоЗапроса)
	
	Данные = ТелоЗапроса.data;
	Если НЕ ЗначениеЗаполнено(Данные)  Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	Если Данные.Количество() = 0 Тогда
		Возврат Неопределено;		
	КонецЕсли; 	
	
	РезультатОчисткиЗаписей = РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла(Данные);
	Возврат РезультатОчисткиЗаписей;
	
КонецФункции 

#КонецОбласти

//TODO:  Не нужен?
#Область  exchangeData

Функция exchangeData(Запрос)	Экспорт
	
	ТелоЗапроса = СтруктураИзТелаHTTPЗапросаУнив(Запрос);
	
	Попытка
		
		СтруктураСообщенияОбмена = СтруктураСообщенияОбмена(ТелоЗапроса);
		РезультатПроверки = СтруктураСообщенияОбмена.РезультатПроверки; 
		Если ЗначениеЗаполнено(РезультатПроверки) И РезультатПроверки = Ложь Тогда
			ОписаниеОшибки = "Сообщение обмена не корректно или адрес получателя указан не верно";
			Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
			Возврат Ответ;
		КонецЕсли;
		
		пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_ОбменДанными", пр_НастройкиПовтИсп.ТекущийПользователь()); 
		РезультатExchangeData = пр_Модуль.РезультатExchangeData(ТелоЗапроса);
		
		Если ТипЗнч(РезультатExchangeData) = Тип("Строка") Тогда
			Ответ = ЗаполненныйОтветHTTP(РезультатExchangeData, Неопределено, 201);
			Возврат Ответ;
		КонецЕсли;
		
		//Отправка своих данных
		//Данные = СтруктураДанныхЭтойБазы();
		Ответ = ЗаполненныйОтветHTTP(, РезультатExchangeData, 200);
		Возврат Ответ;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("exchangeData", , ОписаниеОшибки);	
		Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
		Возврат Ответ;
	КонецПопытки;
	
КонецФункции // ()

Функция РезультатExchangeData(ТелоЗапроса)
	
	Данные = ТелоЗапроса.data;
	Если НЕ ЗначениеЗаполнено(Данные)  Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	Если Данные.Количество() = 0 Тогда
		Возврат Неопределено;		
	КонецЕсли; 	
	
	
	
КонецФункции 

Функция СтруктураRequestByName(requestName, requestText, parameters)   Экспорт
	
	СтруктураОтветаRequest = Новый Структура("requestName, requestText, parameters");
	
	СтруктураОтветаRequest.requestName = requestName;
	СтруктураОтветаRequest.requestText = requestText;
	СтруктураОтветаRequest.parameters = parameters;
	
	Возврат СтруктураОтветаRequest;
	
КонецФункции


#КонецОбласти
 
#КонецОбласти


#Область  СлужебныеHTTPЗапросов

Функция СтруктураСообщенияОбмена(ТелоЗапроса) Экспорт
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь());
	НастройкиТекущейБД = Модуль.НастройкиТекущейБД();
	
	СтруктураСообщенияОбмена = Новый Структура(); 
	СтруктураСообщенияОбмена.Вставить("НастройкиТекущейБД", НастройкиТекущейБД);
	РезультатПроверки = НастройкиТекущейБД.ИДБазыИсточник = ТелоЗапроса.header.to;	
	СтруктураСообщенияОбмена.Вставить("РезультатПроверки", РезультатПроверки);
	Возврат	 СтруктураСообщенияОбмена;
	
КонецФункции

Функция СтруктураОтветаУниверсальногоОбменаПоМетодуСсылкеУО(СсылкаУО, data = Неопределено, instruct = Неопределено) Экспорт
	
	ПараметрыПодключения = оду_ОбщийПовтИсп.ПараметрыПодключенияПоСсылкеУО(СсылкаУО); 
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
	
	СтруктураВыполненияОбмена = СтруктураТелаЗапросаHTTP(instruct);
	СтруктураВыполненияОбмена.header.to = НастройкиТекущейБД.ИДБазыПриемник;
	СтруктураВыполненияОбмена.header.front = НастройкиТекущейБД.ИДБазыИсточник;
	СтруктураВыполненияОбмена.data  = data; 
	
	ТелоЗапроса = ЗаполненноеТелоЗапросаHTTPПоСтруктуреОбмена(СтруктураВыполненияОбмена);
	СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(ПараметрыПодключения, ТелоЗапроса, "exchangeData");

КонецФункции

//
Функция СтруктураОтветаУниверсальногоОбмена(ПараметрыПодключения, ТелоЗапроса = Неопределено, Метод)   Экспорт
	
	Попытка
		
		//Подключение через http
		Сервер 			 = ПараметрыПодключения.Сервер;
		Порт			 = ПараметрыПодключения.Порт;
		Пользователь 	 = ПараметрыПодключения.Пользователь;
		Пароль 			 = ПараметрыПодключения.Пароль;
		
		ИмяБазыУО = ПараметрыПодключения.ИмяБазыУО;
		ПутьКСервисуHTTP = "/hs/universalExchange/";
		//ПутьКСервисуHTTP = ПараметрыПодключения.ПутьКСервисуHTTP;
		
		АдресHTTP = ИмяБазыУО + ПутьКСервисуHTTP + Метод;
		
		Соединение = Новый HTTPСоединение(Сервер, Порт, Пользователь, Пароль);//,,,ssl);	
		
		ЗаголовокЗапросаHTTP = Новый Соответствие();
		ЗаголовокЗапросаHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
		ЗапросHTTP = Новый HTTPЗапрос(АдресHTTP, ЗаголовокЗапросаHTTP);
		
		Если ТелоЗапроса <> Неопределено Тогда
			ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			ОтветHTTP = Соединение.ОтправитьДляОбработки(ЗапросHTTP);
		Иначе
			//http://at-sqltest/buhgalaxytest/hs/universalExchange/ping
			ОтветHTTP = Соединение.ВызватьHTTPМетод("GET", ЗапросHTTP);
		КонецЕсли; 
		
		Если ОтветHTTP.КодСостояния = 200 Тогда
			
			Если Метод = "ping" Тогда
				СтруктураОтвета =  ОтветHTTP.ПолучитьТелоКакСтроку();
			Иначе
				СтруктураОтвета = СтруктураИзТелаHTTPЗапросаУнив(ОтветHTTP);
			КонецЕсли; 
			
			Возврат СтруктураОтвета;
			
		Иначе
			Возврат Неопределено;
		КонецЕсли; 
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить(); 
		Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции 

#Область  НастройкиHTTPПодключения


#КонецОбласти

Функция СтруктураИзТелаHTTPЗапросаУнив(Запрос, СерилизоватьXDTO = Истина, ИменаПолейДат = "")   Экспорт
	
	ТелоЗапроса = Запрос.ПолучитьТелоКакПоток();
	
	Если СерилизоватьXDTO = Истина Тогда
		ДанныеHTTPЗапроса = ПрочитатьJSON_ИзТела_Сериализ(ТелоЗапроса);
	Иначе
		ДанныеHTTPЗапроса = ПрочитатьJSON_ИзТела(ТелоЗапроса, ИменаПолейДат);
	КонецЕсли; 
	
	Возврат ДанныеHTTPЗапроса;
	
КонецФункции


//methodName 	- Имя метода произвольного обмена
//debug 	 	- Признак выполнения отладки
//background 	- Признак выполнения обмена в фоне
//serializeXDTO - Признак чтения, записи JSON тела HTTPзапроса
Функция СтруктураИнструкцииВыполненияОбмена() Экспорт
	СтруктураВыполнения = Новый Структура();
	СтруктураВыполнения.Вставить("methodName", "");
	СтруктураВыполнения.Вставить("debug", Ложь);
	СтруктураВыполнения.Вставить("background", Ложь);
	СтруктураВыполнения.Вставить("serializeXDTO", Истина);
	Возврат СтруктураВыполнения;
КонецФункции

Функция СтруктураТелаЗапросаHTTP(instruct = Неопределено)   Экспорт
	
	СтруктураЗаловка = Новый Структура("to, front");
	Если instruct = Неопределено Тогда
		instruct = СтруктураИнструкцииВыполненияОбмена();	
	КонецЕсли;
	СтруктураОтветаHTTP = Новый Структура("header, instruct, data, error, code", СтруктураЗаловка, instruct); 
	
	Возврат СтруктураОтветаHTTP;
	
КонецФункции

Функция ЗаполненноеТелоЗапросаHTTPПоСтруктуреОбмена(СтруктураВыполненияОбмена)  Экспорт
	
	Если СтруктураВыполненияОбмена.instruct.serializeXDTO = Истина Тогда
		ТелоЗапроса = СформироватьJSON_Сериализ(СтруктураВыполненияОбмена);
	Иначе
		ТелоЗапроса = СформироватьJSON(СтруктураВыполненияОбмена);
	КонецЕсли; 
	
	Возврат ТелоЗапроса;
	
КонецФункции

// Формирует HTTP ответ со стандартной структурой
//
// Параметры:
//  error  - Строка - Описание ошибки
//                 
//  data   - Структура - Данные
//                  
//  code    - Число - Код ответа 
//		200 - Все хорошо
//		201 - Исключение
//		202 - Ошибки по коду
//
// Возвращаемое значение:
//   HTTPСервисОтвет   - Заполненый по стандартной структуре
//
Функция ЗаполненноеТелоЗапросаHTTP(ИДБазыПриемник, ИДБазыИсточник, data, СерилизоватьXDTO = Истина)  Экспорт
	
	ДанныеДляОтвета = СтруктураТелаЗапросаHTTP();
	ДанныеДляОтвета.header.to = ИДБазыПриемник;
	ДанныеДляОтвета.header.front = ИДБазыИсточник;
	ДанныеДляОтвета.data  = data; 
	
	Если СерилизоватьXDTO = Истина Тогда
		ТелоЗапроса = СформироватьJSON_Сериализ(ДанныеДляОтвета);
	Иначе
		ТелоЗапроса = СформироватьJSON(ДанныеДляОтвета);
	КонецЕсли; 
	
	Возврат ТелоЗапроса;
	
КонецФункции

Функция СтруктураОтветаHTTP()   Экспорт
	
	СтруктураОтветаHTTP = Новый Структура("error, data, code");
	Возврат СтруктураОтветаHTTP;
	
КонецФункции

// Формирует HTTP ответ со стандартной структурой
//
// Параметры:
//  error  - Строка - Описание ошибки
//                 
//  data   - Структура - Данные
//                  
//  code    - Число - Код ответа 
//		200 - Все хорошо
//		201 - Исключение
//		202 - Ошибки по коду
//
// Возвращаемое значение:
//   HTTPСервисОтвет   - Заполненый по стандартной структуре
//
Функция ЗаполненныйОтветHTTP(error = "", data, code = 200, СерилизоватьXDTO = Истина)  Экспорт
	
	ДанныеДляОтвета = СтруктураОтветаHTTP();
	
	ДанныеДляОтвета.error = error;
	ДанныеДляОтвета.data  = data;
	ДанныеДляОтвета.code   = code;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки["Content-Type"] = "text/json; charset=utf-8";
	
	Если СерилизоватьXDTO = Истина Тогда
		ТелоЗапроса = СформироватьJSON_Сериализ(ДанныеДляОтвета);
	Иначе
		ТелоЗапроса = СформироватьJSON(ДанныеДляОтвета);
	КонецЕсли; 
	
	Ответ.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции


#КонецОбласти

#КонецОбласти


#Область JSON

#Область  ЗаписьJSON 

Функция СформироватьJSON(СтруктураДанных, ФормироватьСПереносами = Ложь) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Попытка
		ЗаписьJSON = Новый ЗаписьJSON;
		Если ФормироватьСПереносами Тогда
			ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
		Иначе
			ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, Символы.Таб));
		КонецЕсли; 
		
		НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
		НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
		НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
		
		ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, НастройкиСериализацииJSON);
		
		Возврат ЗаписьJSON.Закрыть();
	Исключение
		ЗаписатьОшибку(ИнформацияОбОшибке(), Истина);
	КонецПопытки; 
	
КонецФункции

// Формирует текст JSON
//
// Параметры:
//  Данные  - <Тип.Вид> - <описание параметра>
//  Путь - путь к файлу - записывает JSON в файл
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СформироватьJSON_Сериализ(Данные,  Путь = "")   Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	
	Если Путь = "" Тогда
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	Иначе 	
		ЗаписьJSON.ОткрытьФайл(Путь,,,ПараметрыЗаписиJSON);
	КонецЕсли; 
		
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Данные, НазначениеТипаXML.Явное);
	
	ТелоЗапроса = ЗаписьJSON.Закрыть();
	
	Возврат ТелоЗапроса
	
КонецФункции

#КонецОбласти
 
#Область  ЧтениеJSON 

Функция ПрочитатьJSON_ИзТела_Сериализ(ТелоЗапроса)   Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Если ТипЗнч(ТелоЗапроса) = Тип("Поток") Тогда
		ЧтениеJSON.ОткрытьПоток(ТелоЗапроса);
	Иначе
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	КонецЕсли; 
	
	ДанныеHTTPЗапроса = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	
	ЧтениеJSON.Закрыть();
	
	Возврат ДанныеHTTPЗапроса;
	
КонецФункции

Функция ПрочитатьJSON_ИзТела(ТелоЗапроса, ИменаПолейДат = "")   Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Если ТипЗнч(ТелоЗапроса) = Тип("Поток") Тогда
		ЧтениеJSON.ОткрытьПоток(ТелоЗапроса);
	Иначе
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	КонецЕсли; 
	
	Если ИменаПолейДат = "" Тогда
		ДанныеHTTPЗапроса = ПрочитатьJSON(ЧтениеJSON);
	Иначе
		ДанныеHTTPЗапроса = ПрочитатьJSON(ЧтениеJSON,, ИменаПолейДат, ФорматДатыJSON.ISO);
	КонецЕсли; 
	
	ЧтениеJSON.Закрыть();
	
	Возврат ДанныеHTTPЗапроса;
	
КонецФункции

Функция ОбработатьJSON(СтрокаJSON) Экспорт
	
	Если СтрокаJSON = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ДанныеВозврата = Неопределено;
	
	Попытка
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаJSON);
		
		ДанныеВозврата = ПрочитатьJSON(Чтение, Истина,,, "ПреобразованиеJSON");
	Исключение
		ЗаписатьОшибку(ИнформацияОбОшибке(), Истина); 
	КонецПопытки; 
	
	Возврат ДанныеВозврата;
КонецФункции

Функция ПреобразованиеJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	Если Свойство = "date" Тогда
		Попытка
			Возврат Дата("19700101") + ?(ТипЗнч(Значение) = Тип("Строка"), Число(Значение), Значение);
		Исключение
			Возврат Дата(1,1,1);
		КонецПопытки;
	КонецЕсли; 
КонецФункции

#КонецОбласти 

#КонецОбласти


#Область  Заменить

Функция ОбъектСозданВЭтойБазе(КодНомер, ИДКонфигурации = "") Экспорт 
	//TODO:  костыль
	Если НЕ ЗначениеЗаполнено(ИДКонфигурации)  Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если ИДКонфигурации = "УТ"  Тогда
		ПрефиксЭтойБД = оду_ОбщийПовтИсп.ПрефиксЭтойИБ();
		ПрефиксДок = Лев(КодНомер, 4);
		Возврат  СтрНайти(ПрефиксДок, ПрефиксЭтойБД) <> 0;
	ИначеЕсли ИДКонфигурации = "УТАП" Тогда
		ПрефиксУТ_Переход = "ПР";
		ПрефиксДок = Лев(КодНомер, 4);
		Возврат  СтрНайти(ПрефиксДок, ПрефиксУТ_Переход) = 0;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции 

#КонецОбласти
 
#Область  Регистрация

#Область  События
 
#Область  Документы

//TODO: 
//01 Проверить удаление
//02 Проверить Д_Приобретение
//Пока только для складов Маркет плейс
Процедура ЗарегистрироватьИзменениеДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ЗарегистрироватьИзменениеОбъектаОбмена(Источник, Отказ, РежимЗаписи, РежимПроведения);	
КонецПроцедуры 

Процедура ПроведениеДокументовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	оду_НовыйОбъектНеЗарегистрирован = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "оду_НовыйОбъектНеЗарегистрирован", Ложь);
	
	Если оду_НовыйОбъектНеЗарегистрирован = Истина Тогда
		ЗарегистрироватьИзменениеОбъектаОбмена(Источник, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведения);	
	КонецЕсли; 
	
КонецПроцедуры 

#КонецОбласти

Процедура ЗарегистрироватьИзменениеПередЗаписью(Источник, Отказ) Экспорт
	ЗарегистрироватьИзменениеОбъектаОбмена(Источник, Отказ);	
КонецПроцедуры 

Процедура ЗарегистрироватьУдалениеПередУдалением(Источник, Отказ) Экспорт
	//TODO:  
	
КонецПроцедуры 

//TODO:  доделывать !! ++
Процедура ЗарегистрироватьСамолет(МассивОбъектовОбмена)  Экспорт
	
	//Если объект уже выгружен или приоритет = приориет самолету, то не регистрируем 
	
	//СтруктураНастроекОбмена = МассивУчастниковОбмена[0];
	//
	//ЗаполнитьСтруктурыДопДанными(МассивУчастниковОбмена, МассивОбъектовОбмена, 10);
	
	
	//TODO:  переделать на массив
	//Отказ = ОбъектОбменаПроходитПроверкуДляРегистрации(СтруктураНастроекОбмена, МассивОбъектовОбмена);
	//Если Отказ = Истина Тогда
	//	Возврат;
	//КонецЕсли; 
	
	////Когда один участник обмена
	//Если СтрНайти(ТипXML, "DocumentRef") > 0 Тогда
	//	ЗарегистрироватьСамолетДляДокументов(МассивОбъектовОбмена, ТипXML, СтруктураНастроекОбмена);	
	//Иначе //Другой тип Справочник, ПВХ
	//	ЗарегистрироватьСамолетСправочники(МассивОбъектовОбмена, ТипXML, СтруктураНастроекОбмена);	
	//КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область  СлужебныеПроцедурыИФункции

//ПриоритетОбмена //Самолет = 10, Изменение = 50
Процедура ЗаполнитьСтруктурыДопДанными(МассивУчастниковОбмена, ОбъектОбмена, ТекущийПользователь, ПриоритетОбмена = 50)
	
	ДатаРегистрации = ?(ПриоритетОбмена = 10, Неопределено, ТекущаяДатаСеанса());
	
	Для каждого СтруктураНастроекОбмена Из МассивУчастниковОбмена Цикл
		СтруктураНастроекОбмена.Вставить("ОбъектОбмена", ОбъектОбмена);
		СтруктураНастроекОбмена.Вставить("ИДОбъекта", XMLСтрока(СтруктураНастроекОбмена.ОбъектОбмена));
		СтруктураНастроекОбмена.Вставить("ПриоритетОбмена", ПриоритетОбмена); 
		СтруктураНастроекОбмена.Вставить("ПриоритетДопПризнака", 0);
		СтруктураНастроекОбмена.Вставить("ДатаРегистрации", ДатаРегистрации);
		СтруктураНастроекОбмена.Вставить("Пользователь", ТекущийПользователь);
	КонецЦикла;
	
КонецПроцедуры
 

	
Процедура ЗарегистрироватьИзменениеОбъектаОбмена(Источник, Отказ, РежимЗаписи = Неопределено, РежимПроведения = Неопределено) Экспорт
	
	//После записи, проверить еще раз при проведении
	Если НЕ ЗначениеЗаполнено(Источник.Ссылка)  Тогда
		Источник.ДополнительныеСвойства.Вставить("оду_НовыйОбъектНеЗарегистрирован", Истина);
		Возврат;
	КонецЕсли; 
	
	ОбъектОбмена = Источник.Ссылка;
	ТипXML = пр_Общий.ИмяТипаXMLПоСсылке(ОбъектОбмена);
	ТекущийПользователь = пр_НастройкиПовтИсп.ТекущийПользователь();
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", ТекущийПользователь); 
	МассивУчастниковОбмена = Модуль.МассивУчастниковОбменаПоТипуОбъекта(ТипXML);
	
	Если МассивУчастниковОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСтруктурыДопДанными(МассивУчастниковОбмена, ОбъектОбмена, ТекущийПользователь);

	//TODO:  
	//Возможно сделать проверку для объекта конфигурации
	//Если НЕ РегистрироватьОбъектОбмена(Источник, Отказ, РежимЗаписи, МассивУчастниковОбмена) Тогда
	//	Возврат;
	//КонецЕсли; 
	
	//СтруктураНастроекОбмена.РегистрироватьДокумент

	Для каждого СтруктураНастроекОбмена Из МассивУчастниковОбмена Цикл
		////TODO:  А как тестить?
		////В не рабочих базах регистрация не работет
		//Если СтруктураНастроекОбмена.ТекущаяБДРабочая = Ложь Тогда
		//	Возврат;
		//КонецЕсли; 
		
	    ОбработкаОтладки = СтруктураНастроекОбмена.ОбработкаОтладки;
		
		//TODO:  
		//Возможно сделать проверку для объекта конфигурации
		Если НЕ РегистрироватьОбъектОбмена(Источник, Отказ, РежимЗаписи, СтруктураНастроекОбмена) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбработкаОтладки = Неопределено Тогда
			Если ЗначениеЗаполнено(СтруктураНастроекОбмена.НастройкаРегистрации) Тогда
				//Если РегистрироватьОбъектОбмена(Источник, Отказ, РежимЗаписи, СтруктураНастроекОбмена.ИДКонфигурации) Тогда
				Выполнить(СтруктураНастроекОбмена.НастройкаРегистрации);	
				//КонецЕсли; 
			КонецЕсли; 	
		Иначе
			Если ТипЗнч(ОбработкаОтладки) = Тип("Строка") Тогда
				//Внешний
				//Если РегистрироватьОбъектОбмена(Источник, Отказ, РежимЗаписи, СтруктураНастроекОбмена.ИДКонфигурации) Тогда
				ВнОбработка = пр_Общий.ПолучитьВнешнююОбработкуПоПути(ОбработкаОтладки);
				//ВнОбработка.ЗарегистрироватьИзменениеДокументаПередЗаписью(Источник, Отказ, СтруктураНастроекОбмена);
				ВнОбработка.ЗарегистрироватьИзменениеОбъекта(Источник, Отказ, СтруктураНастроекОбмена);
				//КонецЕсли; 
			ИначеЕсли ТипЗнч(ОбработкаОтладки) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
				//БСП
				ВнОбработка = пр_Общий.ВнешняяОбработкаБСП(,ОбработкаОтладки);
				ВнОбработка.ЗарегистрироватьИзменениеОбъекта(Источник, Отказ, СтруктураНастроекОбмена);
			Иначе 
				//TODO: Место регистрации 
				оду_ОбменДанными.ЗарегистрироватьИзменениеОбъекта(Источник, Отказ, СтруктураНастроекОбмена);
			КонецЕсли; 	
		КонецЕсли;
	
	КонецЦикла; 
	
	
КонецПроцедуры 

Функция РегистрироватьОбъектОбмена(Источник, Отказ, РежимЗаписи, СтруктураНастроекОбмена)
	
	//РегистрироватьИсточникОбмена = РегистрироватьИсточникОбмена(Источник);
	//Если РегистрироватьИсточникОбмена = Ложь Тогда
	//	Возврат Ложь;
	//КонецЕсли; 
	
	//Проверка по типу объекта
	Если СтруктураНастроекОбмена.МетаданныеНаименование = "Документы" Тогда
		
		Если НЕ (РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ Источник.Проведен) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		//TODO:  Переделать
		//Установка органичения на изменение объектов
		Если ЗначениеЗаполнено(Источник.Номер)  Тогда
			Если НЕ ОбъектСозданВЭтойБазе(Источник.Номер, СтруктураНастроекОбмена.ИДКонфигурацииТекущейБД) Тогда
				
				//Особый случай, когда нужно проводить доки в этой базе
				Если пр_НастройкиПовтИсп.ЕстьДоступПроводитьДокументыСозданныеНеВЭтойБазе(пр_НастройкиПовтИсп.ТекущийПользователь()) Тогда
					Возврат Ложь;
				КонецЕсли; 
				
				//TODO: //ВозвратТоваровОтКлиента - особый случай 
				Если  ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда  
					Возврат Ложь;
				КонецЕсли;
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Запрещено менять объекты созданыные в базе УТ ""Переход""";
				Сообщение.Сообщить(); 
				Отказ = Истина;
				Возврат Ложь;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
	
	РезультатПроверки = ОбъектОбменаПроходитПроверкуДляРегистрации(СтруктураНастроекОбмена, Отказ);
	
	Возврат РезультатПроверки;
	
КонецФункции


//Что решает
// режимы
//А. Одиночный объект - проверка регистрации при изменении
// 1. Проверка, что объект не в режиме загрузка, с выводом сообщения
//    если есть запись в состоянии в режиме загрузка, тогда Отказ = Истина
// 2. Если зареган, то остальные проверки не нужны, нужно только поправить дату регистрации, либо приоритет
//TODO: 
// 3. Количество ошибок не важны, только если это была загрузка с 3я ошибками, тогда все должно обнуляться (кем, когда и как?)
//
// Б Режим Самолет - ручная регистация, быстрый транспорт
// доп. требования может быть несколько однотипных объектов + Обязательный диалог с пользователем (показ сообщений итд)
//1. Ограничить объекты в режиме загрузка, с выводом сообщений
//2. Менять только приоритет, ДатаРегистрации - пустая	
//3. Сообщать, что объекты уже зарегистрированы, либо в пути. 
//TODO:  
// Возможно были выгружены, но пользователь продолжает нажимать на самолет
// если изменений объекта не было - то при первичной отправке на проверку данных на существование в базе приемнике, не производит повторную выгрузку
//
//Количество ошибок не > 3
Функция ОбъектОбменаПроходитПроверкуДляРегистрацииСамолет(СтруктураНастроекОбмена, Отказ)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ДанныеРегистрации.ИДОбъекта, ДанныеЗагрузки.ИДОбъекта) КАК ИДОбъекта,
		|	ЕСТЬNULL(ДанныеРегистрации.ИДБазыПриемник, ДанныеЗагрузки.ИДБазыПриемник) КАК ИДБазыПриемник,
		|	ЕСТЬNULL(ДанныеРегистрации.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
		|	ЕСТЬNULL(ДанныеРегистрации.ПриоритетОбмена, 0) КАК ПриоритетОбмена,
		|	ЕСТЬNULL(ДанныеРегистрации.ПриоритетОбъекта, 0) КАК ПриоритетОбъекта,
		|	ЕСТЬNULL(ДанныеРегистрации.ПриоритетДопПризнака, 0) КАК ПриоритетДопПризнака,
		|	ЕСТЬNULL(ДанныеЗагрузки.НомерПопытки, 0) КАК НомерПопыткиЗагрузки
		|ИЗ
		|	(ВЫБРАТЬ
		|		оду_РегистрацияОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|		оду_РегистрацияОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|		оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|		оду_РегистрацияОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
		|		оду_РегистрацияОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|		оду_РегистрацияОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|		оду_РегистрацияОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта
		|	ИЗ
		|		РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|	ГДЕ
		|		оду_РегистрацияОбъектовОбмена.ИДОбъекта = &ИДОбъекта
		|		И оду_РегистрацияОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник) КАК ДанныеРегистрации
		|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Различные
		|			оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|			оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|			оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|			оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки
		|		ИЗ
		|			РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ГДЕ
		|			оду_СостояниеОбъектовОбмена.ИДОбъекта = &ИДОбъекта
		//|			И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|			И оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных)) КАК ДанныеЗагрузки
		|		ПО ДанныеРегистрации.ИДОбъекта = ДанныеЗагрузки.ИДОбъекта
		//|			И ДанныеРегистрации.ИДБазыПриемник = ДанныеЗагрузки.ИДБазыПриемник
		|";
	
	Запрос.УстановитьПараметр("ИДБазыПриемник", СтруктураНастроекОбмена.ИДБазыПриемник);
	Запрос.УстановитьПараметр("ИДОбъекта", СтруктураНастроекОбмена.ИДОбъекта);
	
	РЗ = Запрос.Выполнить();
	
	Если РЗ.Пустой() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	ВДЗ = РЗ.Выбрать();
		
	ВДЗ.Следующий();
	
	Если ВДЗ.НомерПопыткиЗагрузки > 0 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "*оду. Данный объект нельзя изменять. Он находится в режиме загрузки.";
		Сообщение.Сообщить(); 
	Иначе
		//Запись
		
		////Проверка по типу объекта
		//Если СтруктураНастроекОбмена.МетаданныеНаименование = "Документы" Тогда
		//	
		//	//TODO:  Переделать
		//	//Установка органичения на изменение объектов
		//	Если ЗначениеЗаполнено(Источник.Номер)  Тогда
		//		//Проверка в запросе
		//		Если НЕ ОбъектСозданВЭтойБазе(Источник.Номер, СтруктураНастроекОбмена.ИДКонфигурации) Тогда
		//			
		//			//Особый случай, когда нужно проводить доки в этой базе
		//			Если пр_НастройкиПовтИсп.ЕстьДоступПроводитьДокументыСозданныеНеВЭтойБазе(пр_НастройкиПовтИсп.ТекущийПользователь()) Тогда
		//				Возврат Ложь;
		//			КонецЕсли; 
		//			
		//			//TODO: //ВозвратТоваровОтКлиента - особый случай 
		//			Если  ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда  
		//				Возврат Ложь;
		//			КонецЕсли;
		//			
		//			Сообщение = Новый СообщениеПользователю;
		//			Сообщение.Текст = "Запрещено менять объекты созданыные в базе УТ ""Переход""";
		//			Сообщение.Сообщить(); 
		//			Отказ = Истина;
		//			Возврат Ложь;
		//			
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//КонецЕсли; 
			
		СтруктураНастроекОбмена.ПриоритетОбмена = Макс(ВДЗ.ПриоритетОбмена, СтруктураНастроекОбмена.ПриоритетОбмена);
		СтруктураНастроекОбмена.ПриоритетДопПризнака = Макс(ВДЗ.ПриоритетДопПризнака, СтруктураНастроекОбмена.ПриоритетДопПризнака);
		СтруктураНастроекОбмена.ДатаРегистрации = Макс(ВДЗ.ДатаРегистрации, СтруктураНастроекОбмена.ДатаРегистрации);
		РезультатРегистрации = РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена);
		Если РезультатРегистрации = Ложь Тогда 
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "*оду. Объект не удалось зарегистрировать, попробуйте еще раз.";
			Сообщение.Сообщить(); 
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции 


Функция ТекстЗапросаРегистрацииОбъектОбменаПриИзменении()
	Возврат
		"ВЫБРАТЬ
		|	оду_РегистрацияОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_РегистрацияОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_РегистрацияОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта
		|ПОМЕСТИТЬ ВТ_ДанныеРегистрацииН
		|ИЗ
		|	РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|ГДЕ
		|	оду_РегистрацияОбъектовОбмена.ИДОбъекта = &ИДОбъекта
		|	И оду_РегистрацияОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки
		|ПОМЕСТИТЬ ВТ_ДанныеЗагрузки
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта = &ИДОбъекта
		|	И оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ИДОбъекта, ВТ_ДанныеЗагрузки.ИДОбъекта) КАК ИДОбъекта,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ИДБазыПриемник, ВТ_ДанныеЗагрузки.ИДБазыПриемник) КАК ИДБазыПриемник,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ПриоритетОбмена, 0) КАК ПриоритетОбмена,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ПриоритетОбъекта, 0) КАК ПриоритетОбъекта,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ПриоритетДопПризнака, 0) КАК ПриоритетДопПризнака,
		|	ЕСТЬNULL(ВТ_ДанныеЗагрузки.НомерПопытки, 0) КАК НомерПопыткиЗагрузки
		//|	ЕСТЬNULL(ВТ_ДанныеЗагрузки.НомерПопытки, НЕОПРЕДЕЛЕНО) КАК НомерПопыткиЗагрузки
		|ИЗ
		|	ВТ_ДанныеРегистрацииН КАК ВТ_ДанныеРегистрацииН
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДанныеЗагрузки КАК ВТ_ДанныеЗагрузки
		|		ПО ВТ_ДанныеРегистрацииН.ИДОбъекта = ВТ_ДанныеЗагрузки.ИДОбъекта";
	
КонецФункции 

//Что решает
// режимы
//А. Одиночный объект - проверка регистрации при изменении
// 1. Проверка, что объект не в режиме загрузка, с выводом сообщения
//    если есть запись в состоянии в режиме загрузка, тогда Отказ = Истина
// 2. Если зареган, то остальные проверки не нужны, нужно только поправить дату регистрации, либо приоритет
//TODO: 
// 3. Количество ошибок не важны, только если это была загрузка с 3я ошибками, тогда все должно обнуляться (кем, когда и как?)
//
// Б Режим Самолет - ручная регистация, быстрый транспорт
// доп. требования может быть несколько однотипных объектов + Обязательный диалог с пользователем (показ сообщений итд)
//1. Ограничить объекты в режиме загрузка, с выводом сообщений
//2. Менять только приоритет, ДатаРегистрации - пустая	
//3. Сообщать, что объекты уже зарегистрированы, либо в пути. 
//TODO:  
// Возможно были выгружены, но пользователь продолжает нажимать на самолет
// если изменений объекта не было - то при первичной отправке на проверку данных на существование в базе приемнике, не производит повторную выгрузку
//
//Количество ошибок не > 3
Функция ОбъектОбменаПроходитПроверкуДляРегистрации(СтруктураНастроекОбмена, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРегистрацииОбъектОбменаПриИзменении();
	
	Запрос.УстановитьПараметр("ИДБазыПриемник", СтруктураНастроекОбмена.ИДБазыПриемник);
	Запрос.УстановитьПараметр("ИДОбъекта", СтруктураНастроекОбмена.ИДОбъекта);
	
	РЗ = Запрос.Выполнить();
	
	Если РЗ.Пустой() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	ВДЗ = РЗ.Выбрать();
		
	ВДЗ.Следующий();
	
	//TODO:  разобрать
	//Если ВДЗ.НомерПопыткиЗагрузки > 0 Тогда
	//Если ВДЗ.НомерПопыткиЗагрузки <> Неопределено ИЛИ ВДЗ.НомерПопыткиЗагрузки <= СтруктураНастроекОбмена.КоличествоПопытокПриОшибке Тогда
	Если ВДЗ.НомерПопыткиЗагрузки > 0 Тогда
		Если ВДЗ.НомерПопыткиЗагрузки <= СтруктураНастроекОбмена.КоличествоПопытокПриОшибке Тогда
			Текст = СтрШаблон("*оду. Данный объект был выгружен с ошибкой в количесве: %1 превышающем норму = %2", ВДЗ.НомерПопыткиЗагрузки, СтруктураНастроекОбмена.КоличествоПопытокПриОшибке);
		Иначе
			Текст = "*оду. Данный объект нельзя изменять. Он находится в режиме загрузки.";
		КонецЕсли;
		
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Текст;
		Сообщение.Сообщить(); 
	Иначе
		//Запись
		
		СтруктураНастроекОбмена.ПриоритетОбмена = Мин(ВДЗ.ПриоритетОбмена, СтруктураНастроекОбмена.ПриоритетОбмена);
		СтруктураНастроекОбмена.ПриоритетДопПризнака = Мин(ВДЗ.ПриоритетДопПризнака, СтруктураНастроекОбмена.ПриоритетДопПризнака);
		СтруктураНастроекОбмена.ДатаРегистрации = Макс(ВДЗ.ДатаРегистрации, СтруктураНастроекОбмена.ДатаРегистрации);
		РезультатРегистрации = РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена);
		Если РезультатРегистрации = Ложь Тогда 
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "*оду. Объект не удалось зарегистрировать, попробуйте еще раз.";
			Сообщение.Сообщить(); 
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции 



//Должна быть всегда одна запись, по объекту
Функция РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена, Удалить = Ложь)	Экспорт
	
	Результат = Истина;
	
	Попытка
		
		Запись = РегистрыСведений.оду_РегистрацияОбъектовОбмена.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, СтруктураНастроекОбмена); 
		
		Если Удалить = Истина Тогда
			Запись.Удалить();
		ИначеЕсли ЗначениеЗаполнено(СтруктураНастроекОбмена.ОбъектОбмена)Тогда
			//Запись.ДатаРегистрации = ?(СтруктураНастроекОбмена.Свойство("ДатаРегистрации"), СтруктураНастроекОбмена.ДатаРегистрации, ТекущаяДатаСеанса());
			Запись.Записать();
		Иначе
			Результат = Ложь;
		КонецЕсли; 
		
	Исключение
		Результат = Ложь;
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции 

//Должна быть всегда одна запись, по объекту
Функция РезультатРегистрацииОбъектаОбмена_Было(СтруктураНастроекОбмена, ПризнакПриоритета = "", ЭтоСамолет = Ложь, Удалить = Ложь)	Экспорт
	
	Результат = Истина;
	
	Попытка
		
		Запись = РегистрыСведений.оду_РегистрацияОбъектовОбмена.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, СтруктураНастроекОбмена); 
		Запись.ИДБазы = СтруктураНастроекОбмена.ИДБазыПриемник;
		ОбъектОбмена = СтруктураНастроекОбмена.ОбъектОбмена;
		Запись.ИДОбъекта = XMLСтрока(ОбъектОбмена);
		
		Если Удалить = Истина Тогда
			Запись.Удалить();
		ИначеЕсли ЗначениеЗаполнено(ОбъектОбмена)Тогда
			Запись.ДатаРегистрации = ТекущаяДатаСеанса();
			
			Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь()); 
			ПриоритетСамолета = ?(ЭтоСамолет, 10, 50);
			Приоритет = Модуль.ПриоритетОбъектаОбмена(СтруктураНастроекОбмена.ТипXMLОбъектаИсточника, ПризнакПриоритета);
			Запись.ПриоритетОбмена = СтрШаблон("%1%2", ПриоритетСамолета, Приоритет);
			Запись.Записать();
		Иначе
			Результат = Ложь;
		КонецЕсли; 
		
	Исключение
		Результат = Ложь;
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции 

//Пример
Функция РезультатЗаписиДопСведений(ОбъектСсылка, Свойство, Значение, Удалить = Ложь) Экспорт
	
	Результат = Истина;
	
	Попытка
		
		//Регистрация чз доп сведения
		Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		Запись.Объект = ОбъектСсылка;
		Запись.Свойство = Свойство;
		
		Если Удалить = Истина Тогда
			Запись.Удалить();
		ИначеЕсли ЗначениеЗаполнено(ОбъектСсылка) И ЗначениеЗаполнено(Свойство) И ЗначениеЗаполнено(Значение) Тогда 
			Запись.Значение = Значение;
			Запись.Записать();
		Иначе
			Результат = Ложь;
		КонецЕсли; 
		
	Исключение
		Результат = Ложь;
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти

//TODO:  
// Проверка есть ли объект в Приеменике, с вопросом, может не нужно выгружать повторно, если не было изменений
#Область  Самолет

//возможо сразу отбор
//доки свои проверки  и тд
Функция ПроверитьМассивОбъектовОбмена(МассивСсылокНаОбъект, ИмяТипа, ИДКонфигурации) Экспорт
	
	ПоляЗаполнения = "Номер, Представление";
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("пр_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	ВДЗ = Модуль.ДанныеИБПоСсылкам(МассивСсылокНаОбъект, ПоляЗаполнения, ИмяТипа); 
	
	МассивОбъектовОбмена = Новый Массив; 
	Пока ВДЗ.Следующий() Цикл
		//TODO:  
		Если ОбъектСозданВЭтойБазе(ВДЗ.Номер, ИДКонфигурации) Тогда //СтруктураНастроекОбмена.ИДКонфигурации) Тогда  //не для всех 
			
			МассивОбъектовОбмена.Добавить(ВДЗ.Ссылка);
			
		Иначе 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Нельзя передавать объекты созданные не в этой базе. " + ВДЗ.Представление;
			Сообщение.Сообщить(); 
		КонецЕсли;
	КонецЦикла; 
	
	Возврат МассивОбъектовОбмена;
	
КонецФункции 

Функция СоздатьТЗПоДаннымУчастникамОбмена(МассивУчастниковОбмена)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("БазаПриемник", Новый ОписаниеТипов("СправочникСсылка.оду_БазыУчастникиОбмена"));
	ТЗ.Колонки.Добавить("ИДБазыПриемник", ОбщегоНазначения.ОписаниеТипаСтрока(40));
	//ТЗ.Колонки.Добавить("ОбъектОбмена", Тип("СправочникСсылка.оду_БазыУчастникиОбмена"));
	ТЗ.Колонки.Добавить("ИДОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(40));
	ТЗ.Колонки.Добавить("ПриоритетОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТЗ.Колонки.Добавить("МетаданныеНаименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТЗ.Колонки.Добавить("ТипXMLОбъектаИсточника", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТЗ.Колонки.Добавить("ТипXMLОбъектаПриемника", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат  ТЗ;
	
КонецФункции 

Функция ТекстЗапросаРегистрацииСамолета()
	Возврат
		"ВЫБРАТЬ
		|	ТЗ_УчастникиОбмена.ИДОбъекта КАК ИДОбъекта,
		|	ТЗ_УчастникиОбмена.БазаПриемник КАК БазаПриемник,
		|	ТЗ_УчастникиОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ТЗ_УчастникиОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ТЗ_УчастникиОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ТЗ_УчастникиОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ТЗ_УчастникиОбмена.МетаданныеНаименование КАК МетаданныеНаименование
		|ПОМЕСТИТЬ ВТ_УчастникиОбмена
		|ИЗ
		|	&ТЗ_УчастникиОбмена КАК ТЗ_УчастникиОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	оду_РегистрацияОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_РегистрацияОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_РегистрацияОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта
		|ПОМЕСТИТЬ ВТ_ДанныеРегистрацииН
		|ИЗ
		|	ВТ_УчастникиОбмена КАК ВТ_УчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|		ПО ВТ_УчастникиОбмена.ИДБазыПриемник = оду_РегистрацияОбъектовОбмена.ИДБазыПриемник
		|			И ВТ_УчастникиОбмена.ИДОбъекта = оду_РегистрацияОбъектовОбмена.ИДОбъекта
		|ГДЕ
		|	оду_РегистрацияОбъектовОбмена.ИДОбъекта В(&ИДОбъекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки
		|ПОМЕСТИТЬ ВТ_ДанныеЗагрузки
		|ИЗ
		|	ВТ_УчастникиОбмена КАК ВТ_УчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ПО ВТ_УчастникиОбмена.ИДОбъекта = оду_СостояниеОбъектовОбмена.ИДОбъекта
		|			И ВТ_УчастникиОбмена.ИДБазыПриемник = оду_СостояниеОбъектовОбмена.ИДБазыПриемник
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ИДОбъекта, ВТ_ДанныеЗагрузки.ИДОбъекта) КАК ИДОбъекта,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ИДБазыПриемник, ВТ_ДанныеЗагрузки.ИДБазыПриемник) КАК ИДБазыПриемник,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ПриоритетОбмена, 0) КАК ПриоритетОбмена,
		|	ВТ_ДанныеРегистрацииН.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ПриоритетДопПризнака, 0) КАК ПриоритетДопПризнака,
		|	ЕСТЬNULL(ВТ_ДанныеЗагрузки.НомерПопытки, 0) КАК НомерПопыткиЗагрузки
		|ПОМЕСТИТЬ ВТ_ДанныеРегистрации
		|ИЗ
		|	ВТ_ДанныеРегистрацииН КАК ВТ_ДанныеРегистрацииН
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДанныеЗагрузки КАК ВТ_ДанныеЗагрузки
		|		ПО ВТ_ДанныеРегистрацииН.ИДОбъекта = ВТ_ДанныеЗагрузки.ИДОбъекта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_УчастникиОбмена.ИДОбъекта КАК ИДОбъекта,
		|	ВТ_УчастникиОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ВТ_УчастникиОбмена.МетаданныеНаименование КАК МетаданныеНаименование,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрации.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрации.ПриоритетОбмена, 0) КАК ПриоритетОбмена,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрации.ПриоритетОбъекта, ВТ_УчастникиОбмена.ПриоритетОбъекта) КАК ПриоритетОбъекта,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрации.ПриоритетДопПризнака, 0) КАК ПриоритетДопПризнака,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрации.НомерПопыткиЗагрузки, 0) КАК НомерПопыткиЗагрузки,
		|	ВТ_УчастникиОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ВТ_УчастникиОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника
		|ИЗ
		|	ВТ_УчастникиОбмена КАК ВТ_УчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРегистрации КАК ВТ_ДанныеРегистрации
		|		ПО (ВТ_ДанныеРегистрации.ИДБазыПриемник = ВТ_УчастникиОбмена.ИДБазыПриемник)
		|			И ВТ_УчастникиОбмена.ИДОбъекта = ВТ_ДанныеРегистрации.ИДОбъекта";
	
КонецФункции 

//Что решает
// режимы
//А. Одиночный объект - проверка регистрации при изменении
// 1. Проверка, что объект не в режиме загрузка, с выводом сообщения
//    если есть запись в состоянии в режиме загрузка, тогда Отказ = Истина
// 2. Если зареган, то остальные проверки не нужны, нужно только поправить дату регистрации, либо приоритет
//TODO: 
// 3. Количество ошибок не важны, только если это была загрузка с 3я ошибками, тогда все должно обнуляться (кем, когда и как?)
//
// Б Режим Самолет - ручная регистация, быстрый транспорт
// доп. требования может быть несколько однотипных объектов + Обязательный диалог с пользователем (показ сообщений итд)
//1. Ограничить объекты в режиме загрузка, с выводом сообщений
//2. Менять только приоритет, ДатаРегистрации - пустая	
//3. Сообщать, что объекты уже зарегистрированы, либо в пути. 
//TODO:  
// Возможно были выгружены, но пользователь продолжает нажимать на самолет
// если изменений объекта не было - то при первичной отправке на проверку данных на существование в базе приемнике, не производит повторную выгрузку
//
//Количество ошибок не > 3
Функция ЗарегистрироватьОбъектыОбменаСамолет(СтруктураНастроекОбменаНач, ПриоритетОбмена = 10, ПриоритетДопПризнака = 0, ДатаРегистрации = Неопределено)   Экспорт
	
	МассивУчастниковОбмена = СтруктураНастроекОбменаНач.МассивУчастниковОбмена;
	ТЗ_УчастникиОбмена = СоздатьТЗПоДаннымУчастникамОбмена(МассивУчастниковОбмена);
	ТекущийПользователь = СтруктураНастроекОбменаНач.ТекущийПользователь;

	СоотОбъектов = Новый Соответствие;
	
	ИДОбъекты = Новый Массив;
	Для каждого Эл Из СтруктураНастроекОбменаНач.МассивОбъектовОбмена Цикл
		ИДОбъекта = XMLСтрока(Эл);
		ИДОбъекты.Добавить(ИДОбъекта);
		
		СоотОбъектов.Вставить(ИДОбъекта, Эл); 
		
		Для каждого УО Из МассивУчастниковОбмена Цикл
		    Нстр = ТЗ_УчастникиОбмена.Добавить();
			ЗаполнитьЗначенияСвойств(Нстр, УО); 
			Нстр.ИДОбъекта = ИДОбъекта;
			//СтруктураНастроекОбмена = Новый Структура("ИДОбъекта, ИДБазыПриемник, ОбъектОбмена, ДатаРегистрации, ПриоритетОбмена, ПриоритетОбъекта, ПриоритетДопПризнака"); 
		КонецЦикла; 
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРегистрацииСамолета();
	
	//Запрос.УстановитьПараметр("ИДБазыПриемника", СтруктураНастроекОбмена.ИДБазыПриемника);
	Запрос.УстановитьПараметр("ТЗ_УчастникиОбмена", ТЗ_УчастникиОбмена);
	Запрос.УстановитьПараметр("ИДОбъекты", ИДОбъекты);
	//ДатаРегистрации - признак даты изменения объекта
	//Запрос.УстановитьПараметр("ДатаРегистрации", ?(ДатаРегистрации = Неопределено, ТекущаяДатаСеанса(), ДатаРегистрации));

	РЗ = Запрос.Выполнить();
	
	Если РЗ.Пустой() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	//типа сдесь должен быть обход по группировке по УО
	
	ВДЗ = РЗ.Выбрать();
	
	Пока ВДЗ.Следующий() Цикл
		
		Если ВДЗ.НомерПопыткиЗагрузки > 0 Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "*оду. Данный объект нельзя изменять. Он находится в режиме загрузки.";
			Сообщение.Сообщить(); 
		ИначеЕсли ЗначениеЗаполнено(ВДЗ.ПриоритетОбмена) И ВДЗ.ПриоритетОбмена <= ПриоритетОбмена Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "*оду. Данный объект уже зарегистрирован. Он находится в режиме выгрузки.";
			Сообщение.Сообщить(); 
			
		Иначе
			
			ОбъектОбмена = СоотОбъектов.Получить(ВДЗ.ИДОбъекта);
			Если ОбъектОбмена = Неопределено Тогда
				Продолжить;		
			КонецЕсли; 
			//Запись
			СтруктураНастроекОбмена = СтруктураНастроекОбмена(); 
			ЗаполнитьЗначенияСвойств(СтруктураНастроекОбмена, ВДЗ); 
			
			//Для каждого УО могут разные параметры приоритета объекта и доп признаков
			ПриоритетОбменаВДЗ = ?(ЗначениеЗаполнено(ВДЗ.ПриоритетОбмена), ВДЗ.ПриоритетОбмена, 10); 
			СтруктураНастроекОбмена.ПриоритетОбмена = Мин(ПриоритетОбменаВДЗ, ПриоритетОбмена);
			СтруктураНастроекОбмена.ПриоритетДопПризнака = Макс(ВДЗ.ПриоритетДопПризнака, ПриоритетДопПризнака);
			Если ДатаРегистрации <> Неопределено Тогда
				СтруктураНастроекОбмена.ДатаРегистрации = Макс(ВДЗ.ДатаРегистрации, ДатаРегистрации);
			КонецЕсли; 
			СтруктураНастроекОбмена.ОбъектОбмена = ОбъектОбмена;
			СтруктураНастроекОбмена.Вставить("Пользователь", ТекущийПользователь);
			
			Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", ТекущийПользователь); 
			РезультатРегистрации = Модуль.РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена);
			
			Если РезультатРегистрации = Ложь Тогда 
				//Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон("*оду. Объект %1 не удалось зарегистрировать, попробуйте еще раз.", ОбъектОбмена);
				Сообщение.Сообщить(); 
			КонецЕсли;
			
		КонецЕсли; 	
	КонецЦикла; 

	
	Возврат Ложь;

КонецФункции 

Функция СтруктураНастроекОбмена()
	
	СтруктураНастроекОбмена = Новый Структура("ИДОбъекта, ИДБазыПриемник, ОбъектОбмена, ДатаРегистрации, ПриоритетОбмена, ПриоритетОбъекта, ПриоритетДопПризнака");
	СтруктураНастроекОбмена.Вставить("МетаданныеНаименование");
	СтруктураНастроекОбмена.Вставить("ТипXMLОбъектаИсточника");
	СтруктураНастроекОбмена.Вставить("ТипXMLОбъектаПриемника");
	Возврат  СтруктураНастроекОбмена;

КонецФункции 


Функция ОбъектыОбменаПроходятПроверкуДляРегистрации_(СтруктураНастроекОбмена, ПриоритетОбмена = 10, ПриоритетДопПризнака = 0, ДатаРегистрации = Неопределено)   Экспорт
	
	МассивУчастниковОбмена = СтруктураНастроекОбмена.МассивУчастниковОбмена;
	ТЗ_УчастникиОбмена = СоздатьТЗПоДаннымУчастникамОбмена(МассивУчастниковОбмена);
	
	СоотОбъектов = Новый Соответствие;
	
	ИДОбъекты = Новый Массив;
	Для каждого Эл Из СтруктураНастроекОбмена.МассивОбъектовОбмена Цикл
		ИДОбъекта = XMLСтрока(Эл);
		ИДОбъекты.Добавить(ИДОбъекта);
		
		СоотОбъектов.Вставить(ИДОбъекта, Эл); 
		
		Для каждого УО Из МассивУчастниковОбмена Цикл
		    Нстр = ТЗ_УчастникиОбмена.Добавить();
			ЗаполнитьЗначенияСвойств(Нстр, УО); 
			//СтруктураНастроекОбмена = Новый Структура("ИДОбъекта, ИДБазыПриемник, ОбъектОбмена, ДатаРегистрации, ПриоритетОбмена, ПриоритетОбъекта, ПриоритетДопПризнака"); 
		КонецЦикла; 
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ_УчастникиОбмена.БазаПриемник КАК БазаПриемник,
		|	ТЗ_УчастникиОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ТЗ_УчастникиОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта
		|ПОМЕСТИТЬ ВТ_УчастникиОбмена
		|ИЗ
		|	&ТЗ_УчастникиОбмена КАК ТЗ_УчастникиОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДанныеРегистрации.ИДОбъекта, ДанныеЗагрузки.ИДОбъекта) КАК ИДОбъекта,
		|	ЕСТЬNULL(ДанныеРегистрации.ИДБазыПриемник, ДанныеЗагрузки.ИДБазыПриемник) КАК ИДБазыПриемник,
		|	ЕСТЬNULL(ДанныеРегистрации.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
		|	ЕСТЬNULL(ДанныеРегистрации.ПриоритетОбмена, 0) КАК ПриоритетОбмена,
		|	ДанныеРегистрации.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ЕСТЬNULL(ДанныеРегистрации.ПриоритетДопПризнака, 0) КАК ПриоритетДопПризнака,
		|	ЕСТЬNULL(ДанныеЗагрузки.НомерПопытки, 0) КАК НомерПопыткиЗагрузки
		|ПОМЕСТИТЬ ВТ_ДанныеРегистрации
		|ИЗ
		|	(ВЫБРАТЬ
		|		оду_РегистрацияОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|		оду_РегистрацияОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|		оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|		оду_РегистрацияОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
		|		оду_РегистрацияОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|		оду_РегистрацияОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|		оду_РегистрацияОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта
		|	ИЗ
		|		ВТ_УчастникиОбмена КАК ВТ_УчастникиОбмена
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|			ПО ВТ_УчастникиОбмена.ИДБазыПриемник = оду_РегистрацияОбъектовОбмена.ИДБазыПриемник
		|	ГДЕ
		|		оду_РегистрацияОбъектовОбмена.ИДОбъекта В(&ИДОбъекты)) КАК ДанныеРегистрации
		|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|			оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|			оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|			оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки
		|		ИЗ
		|			РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ГДЕ
		|			оду_СостояниеОбъектовОбмена.ИДОбъекта В(&ИДОбъекты)
		|			И оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных)) КАК ДанныеЗагрузки
		|		ПО ДанныеРегистрации.ИДОбъекта = ДанныеЗагрузки.ИДОбъекта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеРегистрации.ИДОбъекта КАК ИДОбъекта,
		|	ВТ_ДанныеРегистрации.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ВТ_ДанныеРегистрации.ДатаРегистрации КАК ДатаРегистрации,
		|	ВТ_ДанныеРегистрации.ПриоритетОбмена КАК ПриоритетОбмена,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрации.ПриоритетОбъекта, ВТ_УчастникиОбмена.ПриоритетОбъекта) КАК ПриоритетОбъекта,
		|	ВТ_ДанныеРегистрации.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	ВТ_ДанныеРегистрации.НомерПопыткиЗагрузки КАК НомерПопыткиЗагрузки
		|ИЗ
		|	ВТ_УчастникиОбмена КАК ВТ_УчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРегистрации КАК ВТ_ДанныеРегистрации
		|		ПО ВТ_ДанныеРегистрации.ИДБазыПриемник = ВТ_УчастникиОбмена.ИДБазыПриемник";
	
	
	//Запрос.УстановитьПараметр("ИДБазыПриемника", СтруктураНастроекОбмена.ИДБазыПриемника);
	Запрос.УстановитьПараметр("ТЗ_УчастникиОбмена", ТЗ_УчастникиОбмена);
	Запрос.УстановитьПараметр("ИДОбъекты", ИДОбъекты);
	
	РЗ = Запрос.Выполнить();
	
	Если РЗ.Пустой() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	//типа сдесь должен быть обход по группировке по УО
	
	ВДЗ = РЗ.Выбрать();
	
	Пока ВДЗ.Следующий() Цикл
		
		Если ВДЗ.НомерПопыткиЗагрузки > 0 Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "*оду. Данный объект нельзя изменять. Он находится в режиме загрузки.";
			Сообщение.Сообщить(); 
		Иначе
			
			ОбъектОбмена = СоотОбъектов.Получить(ВДЗ.ИДОбъекта);
			Если ОбъектОбмена = Неопределено Тогда
				Продолжить;		
			КонецЕсли; 
			//Запись
			СтруктураНастроекОбмена = Новый Структура("ИДОбъекта, ИДБазыПриемник, ОбъектОбмена, ДатаРегистрации, ПриоритетОбмена, ПриоритетОбъекта, ПриоритетДопПризнака"); 
			ЗаполнитьЗначенияСвойств(СтруктураНастроекОбмена, ВДЗ); 
			
	//Если Док
	
	//Для каждого ОбъектОбмена Из МассивОбъектовОбмена Цикл
			//TODO: Проверить на подзапрос в цикле
		Если ОбъектСозданВЭтойБазе(ОбъектОбмена.Номер, СтруктураНастроекОбмена.ИДКонфигурации) Тогда
			
			СтруктураНастроекОбмена.Вставить("ОбъектОбмена", ОбъектОбмена.Ссылка);
			РезультатРегистрацииОбъектаОбмена = РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена);
					
			Если РезультатРегистрацииОбъектаОбмена = Ложь Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон("Не удалось зарегистрировать в базу %1 объект обмена %2", СтруктураНастроекОбмена.ИДБазыПриемник, Строка(ОбъектОбмена));
				Сообщение.Сообщить(); 
			КонецЕсли; 

		Иначе 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Нельзя передавать объекты созданные не в этой базе. " + Строка(ОбъектОбмена);
			Сообщение.Сообщить(); 
		КонецЕсли;
	//КонецЦикла; 
	
			
			
			//Для каждого УО могут разные параметры приоритета объекта и доп признаков
			СтруктураНастроекОбмена.ПриоритетОбмена = Мин(ВДЗ.ПриоритетОбмена, ПриоритетОбмена);
			СтруктураНастроекОбмена.ПриоритетДопПризнака = Макс(ВДЗ.ПриоритетДопПризнака, ПриоритетДопПризнака);
			Если ДатаРегистрации <> Неопределено Тогда
				СтруктураНастроекОбмена.ДатаРегистрации = Макс(ВДЗ.ДатаРегистрации, ДатаРегистрации);
			КонецЕсли; 
			СтруктураНастроекОбмена.ОбъектОбмена = ОбъектОбмена;
			
			Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
			РезультатРегистрации = Модуль.РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена);
			
			Если РезультатРегистрации = Ложь Тогда 
				//Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон("*оду. Объект %1 не удалось зарегистрировать, попробуйте еще раз.", ОбъектОбмена);
				Сообщение.Сообщить(); 
			КонецЕсли;
			
		КонецЕсли; 	
	КонецЦикла; 

	
	Возврат Ложь;

КонецФункции 

Процедура ЗаполнитьСтруктурыДопДаннымиМассива(МассивУчастниковОбмена, МассивОбъектовОбмена, ПриоритетОбмена = 50)
	
	ДатаРегистрации = ?(ПриоритетОбмена = 10, Неопределено, ТекущаяДатаСеанса());
	
	Для каждого СтруктураНастроекОбмена Из МассивУчастниковОбмена Цикл
		
		СтруктураНастроекОбмена.Вставить("ОбъектыОбмена", МассивОбъектовОбмена);
		МассивИДОбъектов = Новый Массив;
		Для каждого ОбъектОбмена Из МассивОбъектовОбмена Цикл
			МассивИДОбъектов.Добавить(XMLСтрока(ОбъектОбмена));	
		КонецЦикла; 
		СтруктураНастроекОбмена.Вставить("МассивИДОбъектов", МассивИДОбъектов);
		СтруктураНастроекОбмена.Вставить("ПриоритетОбмена", ПриоритетОбмена); 
		СтруктураНастроекОбмена.Вставить("ПриоритетДопПризнака", 0);
		СтруктураНастроекОбмена.Вставить("ДатаРегистрации", ДатаРегистрации);
		
	КонецЦикла;
	
КонецПроцедуры


// Б Режим Самолет - ручная регистация, быстрый транспорт
// доп. требования может быть несколько однотипных объектов + Обязательный диалог с пользователем (показ сообщений итд)
//1. Ограничить объекты в режиме загрузка, с выводом сообщений
//2. Менять только приоритет, ДатаРегистрации - пустая	
//3. Сообщать, что объекты уже зарегистрированы, либо в пути. 
//TODO:  
// Возможно были выгружены, но пользователь продолжает нажимать на самолет
// если изменений объекта не было - то при первичной отправке на проверку данных на существование в базе приемнике, не производит повторную выгрузку
//
//Количество ошибок не > 3
Процедура ЗарегистрироватьСамолетДляОбъектов(МассивУчастниковОбмена, ТипXML)
 	
	//Данные к регистрации, дальнейшая проверка
	МассивДанных = Новый Массив;
	
	
	
	
КонецПроцедуры

Процедура ЗарегистрироватьСамолетДляДокументов(МассивОбъектовОбмена, ТипXML, СтруктураНастроекОбмена)
	
	//Данные к регистрации, дальнейшая проверка
	МассивДанных = Новый Массив;
	
	//Нужен свой запрос
	
	Для каждого ОбъектОбмена Из МассивОбъектовОбмена Цикл

		//TODO: Проверить на подзапрос в цикле
		Если ОбъектСозданВЭтойБазе(ОбъектОбмена.Номер, СтруктураНастроекОбмена.ИДКонфигурации) Тогда
			
			СтруктураНастроекОбмена.Вставить("ОбъектОбмена", ОбъектОбмена.Ссылка);
			РезультатРегистрацииОбъектаОбмена = РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена);
					
			Если РезультатРегистрацииОбъектаОбмена = Ложь Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон("Не удалось зарегистрировать в базу %1 объект обмена %2", СтруктураНастроекОбмена.ИДБазыПриемник, Строка(ОбъектОбмена));
				Сообщение.Сообщить(); 
			КонецЕсли; 

		Иначе 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Нельзя передавать объекты созданные не в этой базе. " + Строка(ОбъектОбмена);
			Сообщение.Сообщить(); 
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Функция ОбъектОбменаПроходитПроверкуДляРегистрации_(СтруктураНастроекОбмена, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ДанныеРегистрации.ИДОбъекта, ДанныеЗагрузки.ИДОбъекта) КАК ИДОбъекта,
		|	ЕСТЬNULL(ДанныеРегистрации.ИДБазыПриемник, ДанныеЗагрузки.ИДБазыПриемник) КАК ИДБазыПриемник,
		|	ЕСТЬNULL(ДанныеРегистрации.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
		|	ЕСТЬNULL(ДанныеРегистрации.ПриоритетОбмена, 0) КАК ПриоритетОбмена,
		|	ЕСТЬNULL(ДанныеРегистрации.ПриоритетОбъекта, 0) КАК ПриоритетОбъекта,
		|	ЕСТЬNULL(ДанныеРегистрации.ПриоритетДопПризнака, 0) КАК ПриоритетДопПризнака,
		|	ЕСТЬNULL(ДанныеЗагрузки.НомерПопытки, 0) КАК НомерПопыткиЗагрузки
		|ИЗ
		|	(ВЫБРАТЬ
		|		оду_РегистрацияОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|		оду_РегистрацияОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|		оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|		оду_РегистрацияОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
		|		оду_РегистрацияОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|		оду_РегистрацияОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|		оду_РегистрацияОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта
		|	ИЗ
		|		РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|	ГДЕ
		|		оду_РегистрацияОбъектовОбмена.ИДОбъекта = &ИДОбъекта
		|		И оду_РегистрацияОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник) КАК ДанныеРегистрации
		|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|			оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|			оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|			оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки
		|		ИЗ
		|			РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ГДЕ
		|			оду_СостояниеОбъектовОбмена.ИДОбъекта = &ИДОбъекта
		|			И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|			И оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных)) КАК ДанныеЗагрузки
		|		ПО ДанныеРегистрации.ИДБазыПриемник = ДанныеЗагрузки.ИДБазыПриемник
		|			И ДанныеРегистрации.ИДОбъекта = ДанныеЗагрузки.ИДОбъекта
		|";
	
	Запрос.УстановитьПараметр("ИДБазыПриемник", СтруктураНастроекОбмена.ИДБазыПриемник);
	Запрос.УстановитьПараметр("ИДОбъекта", СтруктураНастроекОбмена.ИДОбъекта);
	
	РЗ = Запрос.Выполнить();
	
	Если РЗ.Пустой() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	ВДЗ = РЗ.Выбрать();
		
	ВДЗ.Следующий();
	
	Если ВДЗ.НомерПопыткиЗагрузки > 0 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "*оду. Данный объект нельзя изменять. Он находится в режиме загрузки.";
		Сообщение.Сообщить(); 
	Иначе
		//Запись
		ПриоритетОбмена = Макс(ВДЗ.ПриоритетОбмена, СтруктураНастроекОбмена.ПриоритетОбмена);
		ПриоритетДопПризнака = Макс(ВДЗ.ПриоритетДопПризнака, СтруктураНастроекОбмена.ПриоритетДопПризнака);
		ПриоритетДопПризнака = Макс(ВДЗ.ДатаРегистрации, СтруктураНастроекОбмена.ДатаРегистрации);
		РезультатРегистрации = РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена);
		Если РезультатРегистрации = Ложь Тогда 
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "*оду. Объект не удалось зарегистрировать, попробуйте еще раз.";
			Сообщение.Сообщить(); 
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции 

Процедура ЗарегистрироватьСамолетСправочники(МассивОбъектовОбмена, ТипXML, СтруктураНастроекОбмена)
	
	Для каждого ОбъектОбмена Из МассивОбъектовОбмена Цикл
	
		
	
	КонецЦикла; 
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти
 
 
#Область  РЕГЛАМЕНТ

//TODO:  Запуск в Фоне
// Проверка, на активность работы фонового задания
Процедура РегламентОбмена(РежимОбмена = Неопределено, НомерВыполнения = 1)   Экспорт
	
	оду_ИспользоватьУниверсальныйОбмен = оду_ИспользоватьУниверсальныйОбмен();
	Если  НЕ оду_ИспользоватьУниверсальныйОбмен Тогда
		Возврат;
	КонецЕсли; 
	
	НаименованиеЗадания = НаименованиеИсполняющегоФоновогоЗадания();
	ЗаданиеВыполняется = пр_Общий.ПроверитьВыполнениеФоновогоЗадания(НаименованиеЗадания);
	Если ЗаданиеВыполняется = Истина Тогда
	 	Возврат;
	КонецЕсли; 

	ВыполнитьРегламентОбмена(РежимОбмена, НомерВыполнения);
	//Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	//Модуль.ВыполнитьОбменВФоне(РежимОбмена); 
	
КонецПроцедуры

Функция ВыполнитьОбменВФоне(РежимОбмена = Неопределено, НомерВыполнения = 1)	Экспорт
	
	НаименованиеЗадания = НаименованиеИсполняющегоФоновогоЗадания();
	ЗаданиеВыполняется = пр_Общий.ПроверитьВыполнениеФоновогоЗадания(НаименованиеЗадания);
	Если ЗаданиеВыполняется = Истина Тогда
	 	Возврат Неопределено;
	КонецЕсли; 
	
	ВерсияБСП = Лев(пр_НастройкиПовтИсп.ВерсияБСП(), 3);
	ИмяПроцедуры = "оду_Общий.ВыполнитьРегламентОбмена";
	
	Если ВерсияБСП > "2.2" Тогда
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		ПараметрыВыполнения.КлючФоновогоЗадания = Строка(Новый УникальныйИдентификатор());
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
		ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяПроцедуры, РежимОбмена, НомерВыполнения);
	Иначе 
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(РежимОбмена);
		МассивПараметров.Добавить(НомерВыполнения);
		пр_Общий.ЗапуститьФоновоеВыполнение(ИмяПроцедуры,  МассивПараметров, НаименованиеЗадания);	
	КонецЕсли; 
	
КонецФункции 

Функция ВыполнитьРегламентОбмена(РежимОбмена = Неопределено, НомерВыполнения = 1)   Экспорт
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь());
	НастройкиТекущейБД = Модуль.НастройкиТекущейБД();
	
	Если НастройкиТекущейБД.Используется = Ложь Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	//Прерывать после полного цилка обммена (Загрузка - выгрузка)
	Если НомерВыполнения > 2 Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Если РежимОбмена = Неопределено Тогда
		РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
	//ИначеЕсли НомерВыполнения > 1 Тогда
	//	РежимОбмена = ?(РежимОбмена = оду_ОбщийПовтИсп.РежимЗагрузка(), оду_ОбщийПовтИсп.РежимВыгрузка(), оду_ОбщийПовтИсп.РежимЗагрузка());
	КонецЕсли; 

	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь());
	
	Если РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка() Тогда
		Модуль.ВыполнитьВыгрузкуДанных(НомерВыполнения, НастройкиТекущейБД);
	Иначе
		Модуль.ВыполнитьЗагрузкуДанных(НомерВыполнения, НастройкиТекущейБД);
	КонецЕсли; 
	
КонецФункции 


Функция НаименованиеИсполняющегоФоновогоЗадания()
	
	Возврат "оду_РегламентОбмена";
	
КонецФункции

#КонецОбласти


#Область  ВЫГРУЗКА

// Описание алгоритма 
// 01 Обход по всем УО по приоритету
// 02 Проверка связи
// 03 Новая порция для выгрузки 
//	??? Не выгружать При ошибках, 
// 04
Процедура ВыполнитьВыгрузкуДанных(НомерВыполнения = 1, НастройкиТекущейБД)	Экспорт
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь());
	
	//
	Попытка
		
		//01 Собрать данные для проверки
		
		// Исключение ошибок
		// Сбор по приоритету с группировкой по самолету и метаданным
		// Данные ответа. Разрешение коллизий, 
		// Данные при ошибках, проверки данных
		
		
		//Цикл по УО
		//TODO:  Возможно разные мх выгрузки
		// 1. Последовательно по участникам обмена, по приоритету
		// 2. Выгружать/ загружать по приоритету пока есть, хоть что-то
		// 3. По коэффициенту по объему информации
		// 4. Чередовать выгрузку загрузку или по приоритету + по графику- времени
		//ВыборкаУО = Модуль.ДанныеОбУчастникахОбмена();
		//Пока ВыборкаУО.Следующий() Цикл
		МассивСтруктурУчастниковОбмена = Модуль.ДанныеОбУчастникахОбмена();
		Для каждого ВыборкаУО Из МассивСтруктурУчастниковОбмена  Цикл
			
			ИДБазыПриемник = ВыборкаУО.ИДБазыПриемник;
			//ПараметрыПодключения = Модуль.ПараметрыПодключенияПоСсылкеУО(ВыборкаУО.БазаДанных);
			
			//01 есть ли связь
			СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(ВыборкаУО, , "ping");
			Если НЕ ЗначениеЗаполнено(СтруктураОтвета)  Тогда
				Продолжить;			
			КонецЕсли; 
			
			
			//03 Процесс Выполнить выгрузку
			//03.1 Запись в РС_Состояний, что выгружается
			//TODO:  
			ЗаписатьДанныеКВыгрузке(ИДБазыПриемник, НастройкиТекущейБД);
			
			//03.2 Обмен состояниями
			//03.3 Обновление, изменение состояний
			РезультатОбновления = ОбновитьСостоянияОбмена(ВыборкаУО, НастройкиТекущейБД, Истина);
			Если РезультатОбновления = "Прервана связь с приемником" Тогда
				Продолжить;			
			КонецЕсли; 
			
			
			//03.4 Выгрузка
			// группировать по типу метаданных, самолет - приоритет выгрузки, номер строки (ТЧ.Состав)
			// Передача приоритета выгрузки - для загрузки, в разрезе имени файла (минимум)
		   	// Создать место хранения файла обмена + создавать каталог по имени (коду) УО 
			ИмяФайлаОбмена = ИмяФайлаОбмена(НастройкиТекущейБД, ВыборкаУО.ИмяБазыПриемника);
			РезультатВыгрузкиДанных = ВыгрузкаДанных(ВыборкаУО, НастройкиТекущейБД, ИмяФайлаОбмена);
			//Если РезультатВыгрузкиДанных = Неопределено Тогда
			//	Продолжить;			
			//КонецЕсли; 
			
			//Смена состояния
			//04 Обмен состояниями
			// Удалить с регисрации и состояний
			// Регистрация ошибок, номер попытки +++
			РезультатОбновления = ОбновитьСостоянияОбмена(ВыборкаУО, НастройкиТекущейБД);
			Если РезультатОбновления = "Прервана связь с приемником" Тогда
				Продолжить;			
			КонецЕсли; 
			
		КонецЦикла;
		
		//После выгрузки сразу загрузка
		НомерВыполнения = НомерВыполнения + 1;
		ВыполнитьРегламентОбмена(оду_ОбщийПовтИсп.РежимЗагрузка(), НомерВыполнения);
		
	Исключение
		ОтправитьСообщениеВТелеграмExchange("ВыполнитьВыгрузкуДанных", , ОписаниеОшибки(), ВыборкаУО.ИмяБазыПриемника);	
	КонецПопытки; 
	
КонецПроцедуры

Функция	ТекстСбораДанныхДляВыгрузки()
	
	Возврат
		//TODO:  Тест
		//"ВЫБРАТЬ ПЕРВЫЕ 1
		"ВЫБРАТЬ
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	оду_СостояниеОбъектовОбмена.СостояниеОбмена КАК СостояниеОбмена,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(оду_РегистрацияОбъектовОбмена.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) < оду_СостояниеОбъектовОбмена.ДатаРегистрации
		|			ТОГДА оду_СостояниеОбъектовОбмена.ДатаРегистрации
		|		ИНАЧЕ оду_РегистрацияОбъектовОбмена.ДатаРегистрации
		|	КОНЕЦ КАК ДатаРегистрации,
		|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	оду_СостояниеОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	ЕСТЬNULL(оду_ОшибкиОбменаСрезПоследних.НомерПопытки, 0) + 1 КАК НомерПопытки,
		|	оду_РегистрацияОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбмена = 10 КАК ПереносТолькоСсылок
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|		ПО оду_СостояниеОбъектовОбмена.ИДОбъекта = оду_РегистрацияОбъектовОбмена.ИДОбъекта
		|			И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = оду_РегистрацияОбъектовОбмена.ИДБазыПриемник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_ОшибкиОбмена.СрезПоследних(
		|				,
		|				ИДБазыИсточник = &ИДБазыИсточник
		|					И ИДБазыПриемник = &ИДБазыПриемник) КАК оду_ОшибкиОбменаСрезПоследних
		|		ПО оду_СостояниеОбъектовОбмена.ИДОбъекта = оду_ОшибкиОбменаСрезПоследних.ИДОбъекта
		|			И оду_СостояниеОбъектовОбмена.ИДБазыИсточник = оду_ОшибкиОбменаСрезПоследних.ИДБазыИсточник
		|			И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = оду_ОшибкиОбменаСрезПоследних.ИДБазыПриемник
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.СостояниеОбмена = ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.Выгрузка)
		|	И оду_РегистрацияОбъектовОбмена.ОбъектОбмена ЕСТЬ НЕ NULL 
		|	И ЕСТЬNULL(оду_ОшибкиОбменаСрезПоследних.НомерПопытки, 0) < &КоличествоПопытокПриОшибке
		|	И оду_СостояниеОбъектовОбмена.ИДБазыИсточник = &ИДБазыИсточник
		|	И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|	И оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ВыгрузкаДанных)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетОбмена,
		|	ПриоритетОбъекта,
		|	ПриоритетДопПризнака
		|ИТОГИ
		|	КОЛИЧЕСТВО(ИДОбъекта)
		|ПО
		|	ПереносТолькоСсылок,
		|	ТипXMLОбъектаИсточника";
	
КонецФункции 

Функция ВыгрузкаДанных(ВыборкаУО, НастройкиТекущейБД, ИмяФайлаОбмена = "") 	Экспорт
	
	Если ИмяФайлаОбмена = "" Тогда
		ИмяФайлаОбмена = ИмяФайлаОбмена(НастройкиТекущейБД, ВыборкаУО.ИмяБазыПриемника);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстСбораДанныхДляВыгрузки();
	
	КоличествоПопытокПриОшибке = Макс(1, НастройкиТекущейБД.КоличествоПопытокПриОшибке);
	Запрос.УстановитьПараметр("КоличествоПопытокПриОшибке", НастройкиТекущейБД.КоличествоПопытокПриОшибке);
	
	Запрос.УстановитьПараметр("ИДБазыИсточник", НастройкиТекущейБД.ИДБазыИсточник);
	Запрос.УстановитьПараметр("ИДБазыПриемник", ВыборкаУО.ИДБазыПриемник);
	// Не выполнять выгрузку, если превышен 3-х кратный минимальный объем выгрузки (чтобы не было лишних выгрзок, большой очереди, скорость изменнеия данных)
	Запрос.УстановитьПараметр("КолВоОбъектовВСостоянииОбмена", НастройкиТекущейБД.КоличествоОбъектовВПакетеОбмена * 3);
	
	//Ограничение по выгрузке, когда много выгрузилось но мало загружено, например 3 * КоличествоОбъектовВПакетеОбмена 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КоличествоОбъектовВПакетеОбмена", НастройкиТекущейБД.КоличествоОбъектовВПакетеОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВДЗ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РезультатВыгрузки = ВыгрузитьОбъектыУО(ВДЗ, ИмяФайлаОбмена, ВыборкаУО);
	
	Возврат РезультатВыгрузки;
	
КонецФункции 

// Обмен состояниями
// Обновление, изменение состояний
// Изменение состояний
// Разрешение коллизий, запись
Функция ОбновитьСостоянияОбмена(ПараметрыПодключения, НастройкиТекущейБД, ЭтоИсточник = Истина, ПолнаяСверка = Ложь)	Экспорт
	
	ИДБазыПриемник = ПараметрыПодключения.ИДБазыПриемник;
	
	// Объем выборки
	// Исключение ошибок, номер попытки +++
	ДанныеСостояний = ДанныеСостоянийВыгрузки(ИДБазыПриемник, НастройкиТекущейБД);
	
	РезультатОбновления = ОбновитьСостоянияОбменаДалее(ПараметрыПодключения, НастройкиТекущейБД, ДанныеСостояний, ЭтоИсточник, ПолнаяСверка);
	Если РезультатОбновления = "Прервана связь с приемником" Тогда
		Возврат РезультатОбновления;
	ИначеЕсли ТипЗнч(РезультатОбновления) = Тип("Массив") Тогда
		РезультатОбновления = ОбновитьСостоянияОбменаДалее(ПараметрыПодключения, НастройкиТекущейБД, РезультатОбновления, ЭтоИсточник, ПолнаяСверка);
	КонецЕсли; 
	
	Возврат РезультатОбновления;
	
КонецФункции 

Функция ОбновитьСостоянияОбменаДалее(ПараметрыПодключения, НастройкиТекущейБД, ДанныеСостояний, ЭтоИсточник, ПолнаяСверка = Ложь)	Экспорт
	
	Если ПолнаяСверка = Ложь Тогда
		Если ДанныеСостояний = Неопределено  Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		Если ДанныеСостояний.Количество() = 0 Тогда
			Возврат Неопределено;		
		КонецЕсли; 
	КонецЕсли; 
	
	ТелоЗапроса = ЗаполненноеТелоЗапросаHTTP(ПараметрыПодключения.ИДБазыПриемник, НастройкиТекущейБД.ИДБазыИсточник, ДанныеСостояний);
	
	СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(ПараметрыПодключения, ТелоЗапроса, "exchangeStatus");
	
	Если СтруктураОтвета = Неопределено  Тогда
		Возврат Неопределено;		
	КонецЕсли; 
	
	Если СтруктураОтвета.code = 200 Тогда
		ДанныеТЗ = ЗаполнитьТЗСостоянийОбменаИзТелаЗапроса(СтруктураОтвета);
	ИначеЕсли СтруктураОтвета.error = "Нет данных" Тогда
		Возврат Неопределено;		
	Иначе
		Возврат "Прервана связь с приемником";		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ДанныеТЗ)  Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ДанныеТЗ;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
		Блокировка.Заблокировать(); 
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаОбновленияСостояниямиОбмена(ЭтоИсточник);
		Запрос.УстановитьПараметр("ТЗ", ДанныеТЗ);
		
		РЗ = Запрос.Выполнить();
		
		Если РЗ.Пустой() Тогда
			Возврат Неопределено;		
		КонецЕсли;
		
		ВДЗ = РЗ.Выбрать();
		
		ДанныеОтветаСостояний = Новый Массив;
		ДанныеОтветаУдаление = Новый Массив;
		ДанныеРазрешениеКоллизий = Новый Массив;
		МассивЗагруженныхФайловОбмена = Новый Массив;
		МассивЗапросаСсылок = Новый Массив;
		МассивЗапросаДвижений = Новый Массив;
		
		СтруктураПоОбъектуСостояний = СтруктураПоОбъектуСостояний();

		Пока ВДЗ.Следующий() Цикл
			
			СтруктураОтвета = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураПоОбъектуСостояний));
			ЗаполнитьЗначенияСвойств(СтруктураОтвета, ВДЗ); 
			
			Если ВДЗ.Удалить Тогда
				ДанныеОтветаУдаление.Добавить(СтруктураОтвета);
				Продолжить;
			КонецЕсли; 
			
			Если ВДЗ.РежимОбмена = оду_ОбщийПовтИсп.РежимЗагрузка() Тогда
				
				СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
				
				//Разрешение коллизий по последней дате
				Если ВДЗ.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеРазрешениеКоллизий() Тогда
					//TODO:  Добавить в запрос дату регистрации
					//СтруктураОтвета.ДатаРегистрации = ВДЗ.ДатаРегистрацииВыгрузки;
					СтруктураОтвета.ДатаРегистрации = ВДЗ.ДатаРегистрацииОбъекта;
				ИначеЕсли ВДЗ.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеПроверкаДанных() Тогда
					СтруктураОтвета.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгрузка();
				ИначеЕсли ВДЗ.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеЗагружен() 
					//TODO:  уже удалена, но не дошел ответ
					ИЛИ ВДЗ.СостояниеОбменаВыгрузки = Неопределено Тогда
					//ДанныеОтветаУдаление.Добавить(СтруктураОтвета);
					Если ЗначениеЗаполнено(СтруктураОтвета.ИмяФайлаОбмена)  Тогда
						МассивЗагруженныхФайловОбмена.Добавить(СтруктураОтвета.ИмяФайлаОбмена);
					КонецЕсли; 
					Продолжить;
				Иначе
					//Оставляем как есть
				КонецЕсли;
				
			ИначеЕсли ВДЗ.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка() Тогда
				СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимЗагрузка();
			ИначеЕсли ВДЗ.РежимОбмена = оду_ОбщийПовтИсп.РежимЗапросСсылки() Тогда
				// Записать в массив для проверки ссылки
				МассивЗапросаСсылок.Добавить(СтруктураОтвета);
				Продолжить;
			ИначеЕсли ВДЗ.РежимОбмена = оду_ОбщийПовтИсп.РежимЗапросДвижений() Тогда
				МассивЗапросаДвижений.Добавить(СтруктураОтвета);
				Продолжить;
			КонецЕсли;
			
			ДанныеОтветаСостояний.Добавить(СтруктураОтвета);
			
			Если СтруктураОтвета.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеРазрешениеКоллизий() Тогда
				ДанныеРазрешениеКоллизий.Добавить(СтруктураОтвета);
			КонецЕсли; 
			
		КонецЦикла;
		
		ЗаписатьСостоянияОбменаИзМассива(ДанныеОтветаСостояний);
		ЗаписатьСостоянияОбменаИзМассива(ДанныеОтветаУдаление, Истина);
		
		Если МассивЗагруженныхФайловОбмена.Количество() > 0 Тогда
			МассивЗагруженныхФайловОбменаСвернутый = Новый Массив; 
			Для каждого ИмяФайлаОбмена Из МассивЗагруженныхФайловОбмена Цикл
				Если МассивЗагруженныхФайловОбменаСвернутый.Найти(ИмяФайлаОбмена) = Неопределено Тогда
					МассивЗагруженныхФайловОбменаСвернутый.Добавить(ИмяФайлаОбмена);	
				КонецЕсли; 			
			КонецЦикла; 
			
			РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла(МассивЗагруженныхФайловОбменаСвернутый, Истина)
			
		КонецЕсли;
		
		#Область  Запросов_Ссылок_Движений
		 
		ОбработатьЗапросСсылок(МассивЗапросаСсылок);
		
		#КонецОбласти
		
		
		ЗафиксироватьТранзакцию();
		
		Возврат  ДанныеРазрешениеКоллизий;
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("exchangeStatus", , ОписаниеОшибки);	
		Возврат  ОписаниеОшибки;
	КонецПопытки;
	
КонецФункции 

//TODO:  
//Проверить изменить данные состояний по Запросу Ссылок и Движений
//Собрать ответ в ДанныеРазрешениеКоллизий, по этим состояниям (Удалять или Выгружаться будут)
//1. Проверить массив запросов ссылок
Процедура ОбработатьЗапросСсылок(МассивЗапросаСсылок)
	
	Если МассивЗапросаСсылок.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	Попытка
		
		ТЗ = Новый ТаблицаЗначений;
		
		ТЗ.Колонки.Добавить("ИДОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		ТЗ.Колонки.Добавить("ИДБазыИсточник", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		ТЗ.Колонки.Добавить("ИДБазыПриемник", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		ТЗ.Колонки.Добавить("РежимОбмена", Новый ОписаниеТипов("ПеречислениеСсылка.оду_РежимОбмена"));
		ТЗ.Колонки.Добавить("СостояниеОбмена", Новый ОписаниеТипов("ПеречислениеСсылка.оду_СостоянияОбмена"));
		
		ТЗ.Колонки.Добавить("ТипXMLОбъектаИсточника", ОбщегоНазначения.ОписаниеТипаСтрока(150));
		
		Для каждого СтруктураОтвета Из МассивЗапросаСсылок Цикл
			Нстр = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(Нстр, СтруктураОтвета); 
		КонецЦикла;
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТЗ.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
			|	ТЗ.ИДОбъекта КАК ИДОбъекта,
			|	ТЗ.ИДБазыИсточник КАК ИДБазыИсточник,
			|	ТЗ.ИДБазыПриемник КАК ИДБазыПриемник
			|ПОМЕСТИТЬ ВТ_Данные
			|ИЗ
			|	&ТЗ КАК ТЗ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Данные.ИДОбъекта КАК ИДОбъекта,
			|	ВТ_Данные.ИДБазыИсточник КАК ИДБазыИсточник,
			|	ВТ_Данные.ИДБазыПриемник КАК ИДБазыПриемник,
			|	&РежимОбменаЗапросСсылки КАК РежимОбмена,
			|	&СостояниеОбменаПроверкаДанных КАК СостояниеОбмена,
			|	ВТ_Данные.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
			|	ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаПриемника, ВТ_Данные.ТипXMLОбъектаИсточника) КАК ТипXMLОбъектаПриемника,
			|	33 КАК ПриоритетОбмена,
			|	ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НомерСтроки, 1) КАК ПриоритетОбъекта
			|ИЗ
			|	ВТ_Данные КАК ВТ_Данные
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
			|		ПО ВТ_Данные.ИДОбъекта = оду_СостояниеОбъектовОбмена.ИДОбъекта
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
			|		ПО ВТ_Данные.ТипXMLОбъектаИсточника = оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника
			|ГДЕ
			|	оду_СостояниеОбъектовОбмена.ИДОбъекта ЕСТЬ NULL";
			
		Запрос.УстановитьПараметр("ТЗ", ТЗ);
		Запрос.УстановитьПараметр("РежимОбменаЗапросСсылки", оду_ОбщийПовтИсп.РежимЗапросСсылки());
		Запрос.УстановитьПараметр("СостояниеОбменаПроверкаДанных", оду_ОбщийПовтИсп.СостояниеПроверкаДанных());
		
		РЗ = Запрос.Выполнить();
		
		Если РЗ.Пустой() Тогда
			Возврат;
		КонецЕсли; 
		
		
		ВДЗ = РЗ.Выбрать();
		
		Пока ВДЗ.Следующий() Цикл
			Запись = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВДЗ);
			Запись.Записать();
		КонецЦикла;
		
	Исключение
		СтрокаСообщенияОбОшибке = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("ОбработатьЗапросСсылок", , СтрокаСообщенияОбОшибке);	
	КонецПопытки; 
	
КонецПроцедуры

Функция ТекстЗапросаСбораДанныхОбмена()
	
	Возврат
		//"ВЫБРАТЬ ПЕРВЫЕ 50
		"ВЫБРАТЬ ПЕРВЫЕ #КоличествоОбъектовВПакетеОбмена
		|	оду_РегистрацияОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
		|	оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	&ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_РегистрацияОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ВыгрузкаДанных) КАК РежимОбмена,
		|	ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.ПроверкаДанных) КАК СостояниеОбмена,
		|	оду_РегистрацияОбъектовОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	оду_РегистрацияОбъектовОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	оду_РегистрацияОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		//TODO:  проверить заново
		|	0 КАК НомерПопытки,
		|	оду_РегистрацияОбъектовОбмена.Пользователь КАК Пользователь,
		|	оду_РегистрацияОбъектовОбмена.МетаданныеНаименование КАК МетаданныеНаименование,
		|	ЕСТЬNULL(КоличествоОбъектовВСостоянииОбмена.КолВоОбъектовВСостоянииОбмена, 0) КАК Поле1
		|ИЗ
		|	РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ПО оду_РегистрацияОбъектовОбмена.ИДОбъекта = оду_СостояниеОбъектовОбмена.ИДОбъекта
		|			И оду_РегистрацияОбъектовОбмена.ИДБазыПриемник = оду_СостояниеОбъектовОбмена.ИДБазыПриемник,
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(оду_СостояниеОбъектовОбмена.ИДОбъекта) КАК КолВоОбъектовВСостоянииОбмена
		|	ИЗ
		|		РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|	ГДЕ
		|		оду_СостояниеОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|		И оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ВыгрузкаДанных)
		|		И оду_СостояниеОбъектовОбмена.СостояниеОбмена В (ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.РазрешениеКоллизий), ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.ПроверкаДанных))
		|		И оду_СостояниеОбъектовОбмена.НомерПопытки <= &КоличествоПопытокПриОшибке) КАК КоличествоОбъектовВСостоянииОбмена
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта ЕСТЬ NULL
		|	И оду_РегистрацияОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|	И ЕСТЬNULL(КоличествоОбъектовВСостоянииОбмена.КолВоОбъектовВСостоянииОбмена, 0) <= &КолВоОбъектовВСостоянииОбмена
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетОбмена,
		|	ПриоритетОбъекта";
	
КонецФункции 

//TODO:  
// Описание алгоритма 
// Получаем данные 
// 01 Зарегистрированные, не выгруженные, не в загрузке
// 02 В Режиме обмена = "Выгрузка" и в состояниях "РазрешениеКоллизий", "ПроверкаДанных" (В случае ошибок)
// 03 Без Ошибок
// 04 Общее количество не > КоличествоОбъектовВПакетеОбмена
Функция ЗаписатьДанныеКВыгрузке(ИДБазыПриемник, НастройкиТекущейБД)	Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСбораДанныхОбмена();
	
	Запрос.УстановитьПараметр("ИДБазыИсточник", НастройкиТекущейБД.ИДБазыИсточник);
	Запрос.УстановитьПараметр("ИДБазыПриемник", ИДБазыПриемник);
	Запрос.УстановитьПараметр("КоличествоПопытокПриОшибке", НастройкиТекущейБД.КоличествоПопытокПриОшибке);
	// Не выполнять выгрузку, если превышен 3-х кратный минимальный объем выгрузки (чтобы не было лишних выгрзок, большой очереди, скорость изменнеия данных)
	Запрос.УстановитьПараметр("КолВоОбъектовВСостоянииОбмена", НастройкиТекущейБД.КоличествоОбъектовВПакетеОбмена * 3);
	
	//Ограничение по выгрузке, когда много выгрузилось но мало загружено, например 3 * КоличествоОбъектовВПакетеОбмена 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КоличествоОбъектовВПакетеОбмена", НастройкиТекущейБД.КоличествоОбъектовВПакетеОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	//Блокировка
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
		Блокировка.Заблокировать(); 
		
		ВДЗ = РезультатЗапроса.Выбрать();
		ЗаписатьСостоянияОбменаИзВыборкиЗапроса(ВДЗ);
		
	Исключение
		
		ОтправитьСообщениеВТелеграмExchange("ЗаписатьДанныеКВыгрузке", , ОписаниеОшибки(), ИДБазыПриемник);	
		ОтменитьТранзакцию();
		
	КонецПопытки; 
	
	ЗафиксироватьТранзакцию();
	
КонецФункции 

Функция ТекстЗапросаСбораСостоянийВыгрузки()
	
	Возврат
		"ВЫБРАТЬ
		|	оду_СостояниеОбъектовОбмена.СостояниеОбмена КАК СостояниеОбмена,
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	оду_СостояниеОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	оду_СостояниеОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки,
		|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|	И оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ВыгрузкаДанных)
		|	И оду_СостояниеОбъектовОбмена.СостояниеОбмена <> ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.Выгрузка)
		|	И оду_СостояниеОбъектовОбмена.СостояниеОбмена <> ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.Загрузка)
		|	И оду_СостояниеОбъектовОбмена.НомерПопытки <= &КоличествоПопытокПриОшибке
		|
		|УПОРЯДОЧИТЬ ПО
		|	оду_СостояниеОбъектовОбмена.СостояниеОбмена.Порядок
		//|ИТОГИ ПО
		//|	СостояниеОбмена
		|";
	
КонецФункции 

//TODO:  
// Описание алгоритма 
// Получаем данные 
// 01 Зарегистрированные, не выгруженные, не в загрузке
// 02 В Режиме обмена = "Выгрузка" и в состояниях "РазрешениеКоллизий", "ПроверкаДанных" (В случае ошибок)
// 03 Без Ошибок
// 04 Общее количество не > КоличествоОбъектовВПакетеОбмена
Функция ДанныеСостоянийВыгрузки(ИДБазыПриемник, НастройкиТекущейБД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСбораСостоянийВыгрузки();
	
	Запрос.УстановитьПараметр("ИДБазыПриемник", ИДБазыПриемник);
	Запрос.УстановитьПараметр("КоличествоПопытокПриОшибке", НастройкиТекущейБД.КоличествоПопытокПриОшибке);
	
	РЗ = Запрос.Выполнить();//.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	 
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("пр_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	//ДанныеСостоянийВыгрузки = Модуль.МассивСтруктурПоЗапросу(РЗ, ОбходРезультатаЗапроса.ПоГруппировкам, Ложь);
	ДанныеСостоянийВыгрузки = Модуль.МассивСтруктурПоЗапросу(РЗ);
	Возврат ДанныеСостоянийВыгрузки;
	
КонецФункции 


#Область  УОД

//TODO:  
//Определить какие объекты при выгрузки выдают ошибки, либо правило, которое можем исключить
Функция ВыгрузитьОбъектыУО(ВыборкаПоПереносуТолькоСсылок, ИмяФайлаОбмена, ВыборкаУО) Экспорт
	
	Попытка
		
		Пока ВыборкаПоПереносуТолькоСсылок.Следующий() Цикл
			
			ПереносТолькоСсылок = ВыборкаПоПереносуТолькоСсылок.ПереносТолькоСсылок;
			
			КолОбъектовВОбмене = ?(ЗначениеЗаполнено(ВыборкаУО.КоличествоОбъектовВПакетеОбмена), ВыборкаУО.КоличествоОбъектовВПакетеОбмена, 25);
			//КолОбъектовОбмена = ВыборкаПоПереносуТолькоСсылок.Количество();
			КолОбъектовОбмена = ВыборкаПоПереносуТолькоСсылок.ИДОбъекта;
			КолЦиклов = КолОбъектовОбмена / КолОбъектовВОбмене;
			Если Цел(КолЦиклов) <> КолЦиклов Тогда
				КолЦиклов = Окр(КолЦиклов + 0.5);
			КонецЕсли; 
			
			Этап = 1;
			
			СоответвиеПараметровВыгрузки = Новый Соответствие();
			
			МассивДанныхДалее = Новый Массив;
			
			Сч = 1;
			СтрокаОтвета = "";
			КолТекЭл = 1;
			
			ОбработкаОбменаДанных = Неопределено;
			
			
			РезультатВыгрузки = Истина;
			
			Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь()); 
			ТаблицаСостоянийОбмена = Модуль.ТаблицаСостоянийОбмена(); 
			
			//Могут быть разные типы данных
			ИмяТипаXML_До = Неопределено;
			
			ВыборкаПоТипуXML = ВыборкаПоПереносуТолькоСсылок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоТипуXML.Следующий() Цикл
				
				ИмяТипаXML = ВыборкаПоТипуXML.ТипXMLОбъектаИсточника;
				МассивДанныхТек = Новый Массив;
				//СтрТипа = СоответвиеПараметровВыгрузки.Получить(ИмяТипаXML);
				
				ВДЗ = ВыборкаПоТипуXML.Выбрать();
				
				Пока ВДЗ.Следующий() Цикл
					
					ЭлОбмена = ВДЗ.ОбъектОбмена;
					
					//ИмяТипаXML = ВДЗ.ТипXMLОбъектаИсточника;
					
					//СтрТипа = СоответвиеПараметровВыгрузки.Получить(ИмяТипаXML);
					
					//МассивДанныхТек = ?(СтрТипа = Неопределено, Новый Массив, СтрТипа);
					
					МассивДанныхТек.Добавить(ЭлОбмена);
					
					//СоответвиеПараметровВыгрузки.Вставить(ИмяТипаXML, МассивДанныхТек);		
					
					Нстр = ТаблицаСостоянийОбмена.Добавить();
					ЗаполнитьЗначенияСвойств(Нстр, ВДЗ); 
					
					//ИмяТипаXML_До = ИмяТипаXML;
					
					Если (Сч = КолОбъектовВОбмене ИЛИ КолТекЭл >= КолОбъектовОбмена) //И ИмяТипаXML_До <> Неопределено 
						И ТаблицаСостоянийОбмена.Количество() > 0 Тогда
						
						ДобавочноеИмя = " " + Этап + "_" + КолЦиклов + ".xml";
						ИмяФайлаОбменаДалее = ИмяФайлаОбмена + ДобавочноеИмя;
						
						Для каждого Нстр Из ТаблицаСостоянийОбмена Цикл
							Нстр.ИмяФайлаОбмена = ИмяФайлаОбменаДалее;
							Нстр.ДатаВыгрузки = ТекущаяДатаСеанса();
						КонецЦикла; 
						
						СоответвиеПараметровВыгрузки.Вставить(ИмяТипаXML, Новый Структура("ОбъектДляПравилВыгрузки, ПереносТолькоСсылок", МассивДанныхТек, ПереносТолькоСсылок));		
						
						СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОД(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, ОбработкаОбменаДанных, ВыборкаУО);
						
						МассивДанныхДалее = Новый Массив;
						СоответвиеПараметровВыгрузки = Новый Соответствие();
						ИмяТипаXML_До = Неопределено;
						ТаблицаСостоянийОбмена.Очистить();
						
						Этап = Этап + 1;
						Сч = 0;	
						
					КонецЕсли; 
					
					Сч = Сч + 1;
					КолТекЭл = КолТекЭл + 1;
					
				КонецЦикла; //ВДЗ 
				
			КонецЦикла; //ВыборкаПоТипуXML 
			
			Если ТаблицаСостоянийОбмена.Количество() > 0 Тогда
				
				ДобавочноеИмя = " " + Этап + "_" + КолЦиклов + ".xml";
				ИмяФайлаОбменаДалее = ИмяФайлаОбмена + ДобавочноеИмя;
				
				Для каждого Нстр Из ТаблицаСостоянийОбмена Цикл
					Нстр.ИмяФайлаОбмена = ИмяФайлаОбменаДалее;
					Нстр.ДатаВыгрузки = ТекущаяДатаСеанса();
				КонецЦикла; 
				
				СоответвиеПараметровВыгрузки.Вставить(ИмяТипаXML, Новый Структура("ОбъектДляПравилВыгрузки, ПереносТолькоСсылок", МассивДанныхТек, ПереносТолькоСсылок));		
				
				СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОД(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, ОбработкаОбменаДанных, ВыборкаУО);
				
			КонецЕсли; 
			
		КонецЦикла; //ВыборкаПоПереносуТолькоСсылок
		
		Возврат РезультатВыгрузки; 
		
	Исключение
		ОтправитьСообщениеВТелеграмExchange("ВыгрузитьОбъектыУО", , ОписаниеОшибки(), ВДЗ.ИДБазыПриемник);	
		Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции 

Функция ВыполнитьВыгрузкуДанныхУОД(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаПравилОбмена, ОбработкаОбменаДанных, ВыборкаУО)    Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбработкаОбменаДанных = Неопределено Тогда
	
		//Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь()); 
		//ОбработкаОбменаДанных = Модуль.ОбработкаОбменаДанных(ВыборкаУО.ПОД, ВыборкаУО.РежимОтладки);
		Если ВыборкаУО.ПОДИзФайла Тогда
			ТекстДок = Новый ТекстовыйДокумент;
			ТекстДок.Прочитать(ВыборкаУО.ПутьКПОД, КодировкаТекста.UTF8);
			ПОД = ТекстДок.ПолучитьТекст();
		ИначеЕсли  ВыборкаУО.ПОДИзОбработкиБСП И ЗначениеЗаполнено(ВыборкаУО.ОбработкаОтладкиБСП) Тогда
			ТекстДок = Новый ТекстовыйДокумент;
			МакетПравилОбмена = ВыборкаУО.ОбработкаОтладкиБСП.ПолучитьМакет("ПравилаПереносаДанных");
			МакетПравилОбмена.Записать(ТекстДок);
			ПОД = ТекстДок.ПолучитьТекст();
		ИначеЕсли ЗначениеЗаполнено(ВыборкаУО.ПОД)  Тогда 
			ПОД = ВыборкаУО.ПОД;	
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "*оду. Не указано правило обмена данными (ПОД) в настройках обмена";
			Сообщение.Сообщить(); 
			Возврат Ложь;	
		КонецЕсли; 
		
		ОбработкаОбменаДанных = оду_ОбщийПовтИсп.ОбработкаОбменаДанных(ПОД, ВыборкаУО.РежимОтладки);
		
	КонецЕсли; 
	
	Если ОбработкаОбменаДанных = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	//ПодготовитьОбработкуВыгрузки
	// Параметры подключения
	ОбработкаОбменаДанных.ИмяФайлаОбмена	= ИмяФайлаПравилОбмена;
	
	СтруктураДанных = ОбработкаОбменаДанных.Данные;
	СтруктураДанных.СоответвиеПараметровВыгрузки = СоответвиеПараметровВыгрузки; 
	СтруктураДанных.ТаблицаСостоянийОбмена = ТаблицаСостоянийОбмена;
	
	ОбработкаОбменаДанных.Данные = СтруктураДанных;
	
	ОбработкаОбменаДанных.ВыполнитьВыгрузку();
	
	Если ОбработкаОбменаДанных.ФлагОшибки Тогда
		ТекстСообщения = НСтр("ru = 'При переносе сведений о пользователях произошли ошибки.'");
		Результат = Ложь;
		//УдалитьФайлы(ИмяФайлаПравилОбмена);
	Иначе
		Результат = Истина;
	КонецЕсли;
	
	ЗаписатьСостоянияПослеВыгрузкиОбъектов(СтруктураДанных.ТаблицаСостоянийОбмена, Результат);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьСостоянияПослеВыгрузкиОбъектов(ТаблицаСостоянийОбмена, ВыгруженоБезОшибок)
	
	Если ВыгруженоБезОшибок = Истина Тогда
		ТаблицаДляЗаписи = ТаблицаСостоянийОбмена;
	Иначе	
		ТаблицаДляЗаписи = ТаблицаСостоянийОбмена.НайтиСтроки(Новый Структура("Обработан", Истина));
	КонецЕсли; 	
	
	Для каждого Стр Из ТаблицаДляЗаписи Цикл
		
		Попытка
			
			Запись = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Стр);
			Если ВыгруженоБезОшибок = Истина Тогда
				Запись.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгружен();
			КонецЕсли; 
			Запись.Записать();
			
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ОтправитьСообщениеВТелеграмExchange("ЗаписатьСостоянияПослеВыгрузкиОбъектов", , ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЦикла; 
	
КонецФункции 
 
Функция ИмяФайлаОбмена(НастройкиТекущейБД, ИмяБазыПриемника)
	
	ИмяФайлаОбмена = "";
	КаталогОбмена = НастройкиТекущейБД.КаталогОбмена;
	Если ЗначениеЗаполнено(КаталогОбмена)  Тогда
		ПолныйПутьККаталогу = КаталогОбмена + "\" + НастройкиТекущейБД.КодБазыДанных + "_" + ИмяБазыПриемника;
		КаталогСуществует = пр_Общий.КаталогСуществует(ПолныйПутьККаталогу);
		Если КаталогСуществует = Истина Тогда
			ДатаОбмена = СтрЗаменить(Строка(ТекущаяДатаСеанса()),".", "");
			ДатаОбмена = СтрЗаменить(ДатаОбмена,":", "");
			ИмяФайлаОбмена = ПолныйПутьККаталогу + "\УОД " + ДатаОбмена;// + " " + пр_Общий.СгенерироватьСлучайныйТекст(3);
			Возврат  ИмяФайлаОбмена;
		КонецЕсли; 
	КонецЕсли; 
	
	ИмяФайлаОбмена = КаталогВременныхФайлов(); //По умолчанию			
	
	Возврат  ИмяФайлаОбмена;
	
КонецФункции 


#КонецОбласти

#КонецОбласти

#Область  ЗАГРУЗКА

//TODO:  Обработать наличие ошибок в файле выгрузки и передачи в состоянии до объекта ошибки
Функция ТекстЗапросаСбораДанныхДляЗагрузки()
	Возврат
	
		"ВЫБРАТЬ
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Сервер + "" : "" + оду_НастройкиУчастниковОбмена.БазаДанных.Код + "" - "" + оду_НастройкиУчастниковОбмена.БазаДанных.ИДКонфигурации + "" ("" + оду_НастройкиУчастниковОбмена.БазаДанных.ИДБазы + "")"" КАК ПредставлениеИсточника,
		|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
		|	МИНИМУМ(оду_СостояниеОбъектовОбмена.ПриоритетОбмена) КАК ПриоритетОбмена,
		|	МИНИМУМ(оду_СостояниеОбъектовОбмена.ПриоритетОбъекта) КАК ПриоритетОбъекта,
		|	МИНИМУМ(оду_СостояниеОбъектовОбмена.ПриоритетДопПризнака) КАК ПриоритетДопПризнака,
		|	оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Код КАК ИмяБазыИсточника,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Код КАК ИмяБазыУО,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Сервер КАК Сервер,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Порт КАК Порт,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Пользователь КАК Пользователь,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Пароль КАК Пароль,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.ИспользоватьПоддержкуРавныхОстатков КАК ИспользоватьПоддержкуРавныхОстатков,
		|	ЕСТЬNULL(оду_ОшибкиОбменаСрезПоследних.НомерПопытки, 0) КАК НомерПопыткиОшибки,
		|	оду_НастройкиУчастниковОбмена.РежимОтладки КАК РежимОтладки
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_НастройкиУчастниковОбмена КАК оду_НастройкиУчастниковОбмена
		|		ПО оду_СостояниеОбъектовОбмена.ИДБазыИсточник = оду_НастройкиУчастниковОбмена.БазаДанных.ИДБазы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_НастройкиУчастниковОбмена КАК оду_НастройкиТекущяБД
		|		ПО оду_СостояниеОбъектовОбмена.ИДБазыПриемник = оду_НастройкиТекущяБД.БазаДанных.ИДБазы
		|			И (оду_НастройкиТекущяБД.БазаДанных.ТекущаяБД = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_ОшибкиОбмена.СрезПоследних КАК оду_ОшибкиОбменаСрезПоследних
		|		ПО оду_СостояниеОбъектовОбмена.ИДОбъекта = оду_ОшибкиОбменаСрезПоследних.ИДОбъекта
		|			И оду_СостояниеОбъектовОбмена.ИДБазыИсточник = оду_ОшибкиОбменаСрезПоследних.ИДБазыИсточник
		|			И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = оду_ОшибкиОбменаСрезПоследних.ИДБазыПриемник
		|			И оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена = оду_ОшибкиОбменаСрезПоследних.ИмяФайлаОбмена
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных)
		|	И оду_СостояниеОбъектовОбмена.СостояниеОбмена = ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.Загрузка)
		|	И оду_НастройкиУчастниковОбмена.БазаДанных ЕСТЬ НЕ NULL 
		|	И оду_НастройкиТекущяБД.БазаДанных ЕСТЬ НЕ NULL 
		|	И ЕСТЬNULL(оду_ОшибкиОбменаСрезПоследних.НомерПопытки, 0) < &КоличествоПопытокПриОшибке
		|	И оду_НастройкиУчастниковОбмена.Используется = ИСТИНА
		|	И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|
		|СГРУППИРОВАТЬ ПО
		|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена,
		|	оду_СостояниеОбъектовОбмена.НомерПопытки,
		|	оду_НастройкиУчастниковОбмена.ПриоритетОбмена,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Сервер,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Порт,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Пользователь,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Пароль,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.ИспользоватьПоддержкуРавныхОстатков,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Код,
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник,
		|	оду_НастройкиТекущяБД.БазаДанных,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Сервер + "" : "" + оду_НастройкиУчастниковОбмена.БазаДанных.Код + "" - "" + оду_НастройкиУчастниковОбмена.БазаДанных.ИДКонфигурации + "" ("" + оду_НастройкиУчастниковОбмена.БазаДанных.ИДБазы + "")"",
		|	оду_ОшибкиОбменаСрезПоследних.НомерПопытки,
		|	оду_НастройкиУчастниковОбмена.РежимОтладки,
		|	оду_НастройкиУчастниковОбмена.БазаДанных.Код,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетОбмена,
		|	ПриоритетОбъекта,
		|	ПриоритетДопПризнака,
		|	ДатаВыгрузки
		|ИТОГИ ПО
		|	ИДБазыИсточник";

КонецФункции 


Процедура ВыполнитьЗагрузкуДанных(НомерВыполнения = 1, НастройкиТекущейБД)	Экспорт
	
	Попытка
		
		// Исключение ошибок
		// Сбор по приоритету с группировкой по самолету и метаданным
		// Данные ответа. Разрешение коллизий, 
		// Данные при ошибках, проверки данных
		
		//Цикл по УО
		//TODO:  Возможно разные мх выгрузки
		// 1. Последовательно по участникам обмена, по приоритету
		// 2. Выгружать/ загружать по приоритету пока есть, хоть что-то
		// 3. По коэффициенту по объему информации
		// 4. Чередовать выгрузку загрузку или по приоритету + по графику- времени
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаСбораДанныхДляЗагрузки();
		
		КоличествоПопытокПриОшибке = Макс(1, НастройкиТекущейБД.КоличествоПопытокПриОшибке);
		Запрос.УстановитьПараметр("КоличествоПопытокПриОшибке", КоличествоПопытокПриОшибке);
		Запрос.УстановитьПараметр("ИДБазыПриемник", НастройкиТекущейБД.ИДБазыИсточник);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаУО = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		МассивСтруктурОшибокФайловОбмена = Новый Массив;
		
		Пока ВыборкаУО.Следующий() Цикл
			
			ВДЗ = ВыборкаУО.Выбрать();
			МассивЗагруженныхФайловОбмена = Новый Массив;
			
			Пока ВДЗ.Следующий() Цикл
				
				//03 Процесс Выполнить загрузку
				ИмяФайлаОбмена = ВДЗ.ИмяФайлаОбмена;
				ОписаниеОшибки = ВыполнитьЗагрузкуПоПутиФайла(ИмяФайлаОбмена, ВДЗ);
				Если ОписаниеОшибки <> "" Тогда
					МассивСтруктурОшибокФайловОбмена.Добавить(Новый Структура("ИмяФайлаОбмена, ОписаниеОшибки", ИмяФайлаОбмена, ОписаниеОшибки));
					Продолжить;
				КонецЕсли; 
				
				//ИДБазыИсточник = ВДЗ.ИДБазыИсточник;
				//03.1 Запись в РС_Состояний, что загрузили
				РезультатЗаписиСостояния = РезультатЗаписиСостоянияПоИмениФайлаПослеЗагрузки(ИмяФайлаОбмена, ВДЗ.ПредставлениеИсточника);
				Если РезультатЗаписиСостояния <> Истина Тогда
					Продолжить;
				КонецЕсли;
				
				МассивЗагруженныхФайловОбмена.Добавить(ИмяФайлаОбмена);
				
			КонецЦикла;
			
			Если МассивЗагруженныхФайловОбмена.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			//01 есть ли связь
			ВДЗ.Сбросить();
			ВДЗ.Следующий();
			СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(ВДЗ, , "ping");
			Если НЕ ЗначениеЗаполнено(СтруктураОтвета)  Тогда
				Продолжить;			
			КонецЕсли; 
			
			//03.2 Обмен состояниями
			//03.3 Обновление, изменение состояний
			РезультатОбновления = ОбновитьСостоянияОбменаПоИмениФайла(ВДЗ, НастройкиТекущейБД, МассивЗагруженныхФайловОбмена, Ложь);
			Если РезультатОбновления = "Прервана связь с приемником" Тогда
				Продолжить;			
			КонецЕсли; 
			
			//TODO:  
			//Смена состояния
			// Удалить с регисрации, состояний, записей ошибок
			РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла(МассивЗагруженныхФайловОбмена, Истина)
			
		КонецЦикла;
		
		РезультатЗаписиОшибокПоИмениФайлаОбмена(МассивСтруктурОшибокФайловОбмена);
		
		//После загрузки сразу выгрузка
		НомерВыполнения = НомерВыполнения + 1;
		ВыполнитьРегламентОбмена(оду_ОбщийПовтИсп.РежимВыгрузка(), НомерВыполнения);
		
	Исключение
		ОтправитьСообщениеВТелеграмExchange("ВыполнитьЗагрузкуДанных", , ОписаниеОшибки(), ВыборкаУО.ИмяБазыУО);	
	КонецПопытки; 
	
	
КонецПроцедуры

Функция ВыполнитьЗагрузкуПоПутиФайла(ИмяФайлаОбмена, ВДЗ) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяФайлаОбмена)  Тогда
		Возврат "Файл обмена пустой";
	КонецЕсли; 
	
	ЭтотФайлСуществует = пр_Общий.ФайлСуществует(ИмяФайлаОбмена);
	Если ЭтотФайлСуществует = Ложь Тогда
		Возврат "Файл не найден: " + ИмяФайлаОбмена;
	КонецЕсли; 
	
	ОписаниеОшибки = ВыполнитьЗагрузкуКД21(ИмяФайлаОбмена, ВДЗ);
	//Если ОписаниеОшибки <> "" Тогда
		Возврат ОписаниеОшибки;
	//КонецЕсли; 
	
КонецФункции


//оду_ОбменДанными.
//Получение XML	Документа. Чтение и запись ЧЗ УниверсальныйОбменДаннымиXML КД21
Функция ВыполнитьЗагрузкуКД21(ИмяФайлаОбмена, ВДЗ)  Экспорт 
	
	ОписаниеОшибки = "";
	Обработка = оду_ОбщийПовтИсп.ОбработкаОбменаДанных(, ВДЗ.РежимОтладки);
	Обработка.РежимОбмена = "Загрузка";
	Обработка.ИмяФайлаОбмена = ИмяФайлаОбмена;
	Обработка.ЗагружатьДанныеВРежимеОбмена = Истина;
	Обработка.ЗаписыватьВИнформационнуюБазуТолькоИзмененныеОбъекты = Истина;
	Обработка.ОбъектыПоСсылкеЗагружатьБезПометкиУдаления = Истина;
	Обработка.ОптимизированнаяЗаписьОбъектов = Истина;
	Обработка.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
	Обработка.ОбрезатьСтрокиСправа = Истина;
	
	оду_СтруктураУО = Новый Структура("ИДБазыИсточник, ИДБазыПриемник"); 
	ЗаполнитьЗначенияСвойств(оду_СтруктураУО, ВДЗ); 
	Обработка.Данные = оду_СтруктураУО;
	Обработка.ВыполнитьЗагрузку(ОписаниеОшибки);
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Функция ТекстЗапросаСбораДанныхОбменаПослеЗагрузки()
	Возврат
	
		"ВЫБРАТЬ
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	&СостояниеОбмена КАК СостояниеОбмена,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	оду_СостояниеОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	оду_СостояниеОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки,
		|	оду_СостояниеОбъектовОбмена.ОписаниеОшибки КАК ОписаниеОшибки,
		|	оду_СостояниеОбъектовОбмена.СменаИсточникаПриеменикаПриРазрешенииКоллизий КАК СменаИсточникаПриеменикаПриРазрешенииКоллизий
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена = &ИмяФайлаОбмена
		|";

КонецФункции 

Функция РезультатЗаписиСостоянияПоИмениФайлаПослеЗагрузки(ИмяФайлаОбмена, ПредставлениеИсточника)	Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСбораДанныхОбменаПослеЗагрузки();
	
	Запрос.УстановитьПараметр("ИмяФайлаОбмена", ИмяФайлаОбмена);
	Запрос.УстановитьПараметр("СостояниеОбмена", оду_ОбщийПовтИсп.СостояниеЗагружен());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	//Блокировка
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
		Блокировка.Заблокировать(); 
		
		ВДЗ = РезультатЗапроса.Выбрать();
		ЗаписатьСостоянияОбменаИзВыборкиЗапроса(ВДЗ);
		
	Исключение
		
		ОтправитьСообщениеВТелеграмExchange("РезультатЗаписиСостоянияПоИмениФайлаПослеЗагрузки", , ОписаниеОшибки(), ПредставлениеИсточника);	
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки; 
	
	ЗафиксироватьТранзакцию();
	Возврат Истина;
	
КонецФункции 

// Обмен состояниями
// Обновление, изменение состояний
// Изменение состояний
// Разрешение коллизий, запись
Функция ОбновитьСостоянияОбменаПоИмениФайла(ПараметрыПодключения, НастройкиТекущейБД, МассивЗагруженныхФайловОбмена, ЭтоИсточник = Истина)	Экспорт
	
	Попытка
		
		Если МассивЗагруженныхФайловОбмена = Неопределено  Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		Если МассивЗагруженныхФайловОбмена.Количество() = 0 Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		ТелоЗапроса = ЗаполненноеТелоЗапросаHTTP(ПараметрыПодключения.ИДБазыИсточник, НастройкиТекущейБД.ИДБазыИсточник, МассивЗагруженныхФайловОбмена);
		
		СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(ПараметрыПодключения, ТелоЗапроса, "exchangeStatusComplet");
		
		Если СтруктураОтвета = Неопределено  Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		Если СтруктураОтвета.code = 200 Тогда
			РезультатУдаленияСтатуса = СтруктураОтвета.data;
			Возврат РезультатУдаленияСтатуса;		
		Иначе
			Возврат "Прервана связь с приемником";		
		КонецЕсли; 
		
	Исключение
		
		ОтправитьСообщениеВТелеграмExchange("ОбновитьСостоянияОбменаПоИмениФайла", , ОписаниеОшибки(), ПараметрыПодключения.ПредставлениеИсточника);	
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

//Если ЭтоПриемник = Истина - значит последняя очистка 
//Дополнительно удаляем записи с регистрации и файлВыгрузки
//У источника удаляем по дате выгрузки и дате регистрации
Функция РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла(МассивЗагруженныхФайловОбмена, ЭтоПриемник = Ложь)
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
		|	оду_СостояниеОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации
		|ПОМЕСТИТЬ ВТ_ДанныеСостояний
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена В(&МассивЗагруженныхФайловОбмена)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	оду_ОшибкиОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_ОшибкиОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_ОшибкиОбмена.ИДБазыПриемник КАК ИДБазыПриемник
		|ИЗ
		|	РегистрСведений.оду_ОшибкиОбмена КАК оду_ОшибкиОбмена
		|ГДЕ
		|	оду_ОшибкиОбмена.ИмяФайлаОбмена В(&МассивЗагруженныхФайловОбмена)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_РегистрацияОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник
		|ИЗ
		|	ВТ_ДанныеСостояний КАК ВТ_ДанныеСостояний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|		ПО  ВТ_ДанныеСостояний.ИДОбъекта = оду_РегистрацияОбъектовОбмена.ИДОбъекта
		|";
	
	
	Если ЭтоПриемник = Ложь Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|			И ВТ_ДанныеСостояний.ИДБазыПриемник = оду_РегистрацияОбъектовОбмена.ИДБазыПриемник
		|			И (ВТ_ДанныеСостояний.ДатаВыгрузки >= оду_РегистрацияОбъектовОбмена.ДатаРегистрации)";
	ИНаче
		ТекстЗапроса = ТекстЗапроса + "
		|			И ВТ_ДанныеСостояний.ИДБазыИсточник = оду_РегистрацияОбъектовОбмена.ИДБазыПриемник";
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("МассивЗагруженныхФайловОбмена", МассивЗагруженныхФайловОбмена);
	
	ПакетЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	ЗапросСостояний = ПакетЗапроса[0];
	ЗапросОшибок = ПакетЗапроса[1];
	
	//Если ЭтоПриемник = Истина Тогда
		ЗапросРегистраций = ПакетЗапроса[2];
	//КонецЕсли; 
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ЗапросСостояний;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
		Блокировка.Заблокировать(); 
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_ОшибкиОбмена");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ЗапросОшибок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
		Блокировка.Заблокировать(); 
		
		//Если ЭтоПриемник = Истина Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_РегистрацияОбъектовОбмена");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ЗапросРегистраций;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
			Блокировка.Заблокировать(); 
		//КонецЕсли; 
		
		ВДЗ = ЗапросСостояний.Выбрать();
		Пока ВДЗ.Следующий() Цикл
			Запись = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВДЗ);
			Запись.Прочитать();
			Запись.Удалить();
		КонецЦикла;
		
		ВДЗ = ЗапросОшибок.Выбрать();
		Пока ВДЗ.Следующий() Цикл
			РезультатЗаписиОшибкиОбмена(ВДЗ, Истина)
		КонецЦикла;
		
		//Если ЭтоПриемник = Истина Тогда
			ВДЗ = ЗапросРегистраций.Выбрать();
			Пока ВДЗ.Следующий() Цикл
				Запись = РегистрыСведений.оду_РегистрацияОбъектовОбмена.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ВДЗ);
				Запись.Прочитать();
				Запись.Удалить();
			КонецЦикла;
		//КонецЕсли; 
		
		Если ЭтоПриемник = Истина Тогда
			Для каждого ПутьКФайлу Из МассивЗагруженныхФайловОбмена Цикл
				УдалитьФайлы(ПутьКФайлу);
			КонецЦикла; 
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		
		Возврат  Истина;
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла", , ОписаниеОшибки);	
		Возврат  Ложь;
	КонецПопытки;

КонецФункции 

//РегистрацияОшибокОбмена
Функция РезультатЗаписиОшибокПоИмениФайлаОбмена(МассивСтруктурОшибокФайловОбмена)
	
	Если МассивСтруктурОшибокФайловОбмена.Количество() = 0 Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяФайлаОбмена", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ТЗ.Колонки.Добавить("ОписаниеОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	
	Для каждого СтруктураОшибок Из МассивСтруктурОшибокФайловОбмена Цикл
		Нст = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(Нст, СтруктураОшибок); 
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СписокОшибок.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	СписокОшибок.ОписаниеОшибки КАК ОписаниеОшибки
		|ПОМЕСТИТЬ ВТ_Ошибки
		|ИЗ
		|	&СписокОшибок КАК СписокОшибок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Период КАК Период,
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
		|	оду_СостояниеОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	оду_СостояниеОбъектовОбмена.СостояниеОбмена КАК СостояниеОбмена,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	ВТ_Ошибки.ОписаниеОшибки КАК ОписаниеОшибки,
		|	ЕСТЬNULL(оду_ОшибкиОбменаСрезПоследних.НомерПопытки, 0) + 1 КАК НомерПопытки
		|ИЗ
		|	ВТ_Ошибки КАК ВТ_Ошибки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_ОшибкиОбмена.СрезПоследних(
		|					,
		|					ИмяФайлаОбмена В
		|						(ВЫБРАТЬ
		|							ВТ_Ошибки.ИмяФайлаОбмена КАК ИмяФайлаОбмена
		|						ИЗ
		|							ВТ_Ошибки КАК ВТ_Ошибки)) КАК оду_ОшибкиОбменаСрезПоследних
		|			ПО оду_СостояниеОбъектовОбмена.ИДОбъекта = оду_ОшибкиОбменаСрезПоследних.ИДОбъекта
		|				И оду_СостояниеОбъектовОбмена.ИДБазыИсточник = оду_ОшибкиОбменаСрезПоследних.ИДБазыИсточник
		|				И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = оду_ОшибкиОбменаСрезПоследних.ИДБазыПриемник
		|				И оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена = оду_ОшибкиОбменаСрезПоследних.ИмяФайлаОбмена
		|		ПО ВТ_Ошибки.ИмяФайлаОбмена = оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена";
	
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СписокОшибок", ТЗ);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	ЗапросОшибок = Запрос.Выполнить();
	ВДЗ = ЗапросОшибок.Выбрать();
	
	Попытка
		
		ВДЗ = ЗапросОшибок.Выбрать();
		Пока ВДЗ.Следующий() Цикл
			РезультатЗаписиОшибкиОбмена(ВДЗ);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат  Истина;
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла", , ОписаниеОшибки);	
		Возврат  Ложь;
	КонецПопытки;
	
КонецФункции 

#КонецОбласти


#Область  СверкаДанных

#Область  СверкаИсточник
 
Функция СверкаДанныхИсточник(ВыборкаТипДанных)	Экспорт
	
	МассивЗапросов = Новый  Структура();
	
	ДанныеЗапроса = Новый Структура(); 
	
	ДанныеДляСверки = Новый Структура(); 
	
	Пока ВыборкаТипДанных.Следующий() Цикл

		ТипДанных = ВыборкаТипДанных.ТипДанных;
		
		ВыборкаМетаданных = ВыборкаТипДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		КолВыборки = ВыборкаМетаданных.Количество();
		сч = 1;
		ТекстЗапросаСбор = "";
		
		ЗапросДанных = Новый Запрос;
		МассивДанных = Новый Массив; 

		Пока ВыборкаМетаданных.Следующий() Цикл
			
			ВДЗ = ВыборкаМетаданных.Выбрать();
			
			МассивСсылок = Новый Массив;
			Пока ВДЗ.Следующий() Цикл
				МассивСсылок.Добавить(ВДЗ.ОбъектСсылка);
			КонецЦикла;
			
			Если МассивСсылок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
					
			МассивПроверяемыхПолей = СоставПроверяемыхПолейПоТипуДанных(ТипДанных);
			//СоответПолейИсточника = Новый Соответствие;
			//СоответПолейИсточника.Вставить(ВыборкаМетаданных.ТипXMLОбъектаПриемника, СоставПолейОбъекта);
			
			//ИмяТипаОбъекта = XMLТипЗнч(СсылкаНаОбъект1С).ИмяТипа;
			//ИмяТаблицы = СтрЗаменить(ИмяТипаОбъекта, "Ref.", ".");
			
			//проверка на поля
			СсылкаНаОбъект1С = ВыборкаМетаданных.ЗначениеПустойСсылки;
			СоставПроверяемыхПолей = СтруктураПроверяемыхПолейПоТипуДанных(ТипДанных);
			СоставПолейОбъекта = СоставПолейОбъекта(СсылкаНаОбъект1С, СоставПроверяемыхПолей);
			ИмяПараметра = "";
			ТекстЗапроса = ПолучитьТекстЗапросаПоТипуДанных(ВыборкаМетаданных, МассивПроверяемыхПолей, СоставПолейОбъекта, ИмяПараметра);
			
			ЗапросДанных.УстановитьПараметр(ИмяПараметра, МассивСсылок);
			
			ТекстОбъеденить = ?(КолВыборки = сч, "", "	ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС);
			
			ТекстЗапроса = ТекстЗапроса + ТекстОбъеденить;
			
			сч = сч + 1;
			
			ТекстЗапросаСбор = ТекстЗапросаСбор + ТекстЗапроса;
			МассивИД = Новый Массив; 
			Для каждого Ссылка  Из МассивСсылок Цикл
			
				МассивИД.Добавить(XMLСтрока(Ссылка));	
			
			КонецЦикла; 
			
			СтруктураЗапроса = Новый Структура("ТипXMLОбъектаИсточника, ТипXMLОбъектаПриемника, МассивПроверяемыхПолей, МассивСсылок", 
												ВыборкаМетаданных.ТипXMLОбъектаИсточника, ВыборкаМетаданных.ТипXMLОбъектаПриемника, МассивПроверяемыхПолей, МассивИД);
			МассивДанных.Добавить(СтруктураЗапроса);
		КонецЦикла;
		
		
		Если ТекстЗапросаСбор = "" Тогда
			Продолжить;	
		КонецЕсли; 
		
		ЗапросДанных.Текст = ТекстЗапросаСбор;
		
		МассивЗапросов.Вставить(ТипДанных, ЗапросДанных);
		
		ДанныеДляСверки.Вставить(ТипДанных, МассивДанных);

		//РЗ = ЗапросДанных.Выполнить();
		//
		//Если РЗ.Пустой() Тогда
		//	Продолжить;
		//КонецЕсли;
		//
		//ВДЗ = РЗ.Выбрать();
		//
		//МассивДанных = Новый Массив;
		//
		//Пока ВДЗ.Следующий() Цикл
		//	
		//	СоставПроверяемыхПолей = СтруктураПроверяемыхПолейПоТипуДанных(ТипДанных);
		//	ЗаполнитьЗначенияСвойств(СоставПроверяемыхПолей, ВДЗ); 
		//	//СоставПроверяемыхПолей.Вставить("ТипXMLОбъектаИсточника", ВыборкаМетаданных.ТипXMLОбъектаИсточника);
		//	//СоставПроверяемыхПолей.Вставить("ТипXMLОбъектаПриемника", ВыборкаМетаданных.ТипXMLОбъектаПриемника);
		//	СоставПроверяемыхПолей.Вставить("Ссылка", XMLСтрока(ВДЗ.Ссылка));
		//				
		//	МассивДанных.Добавить(СоставПроверяемыхПолей);	
		//	
		//КонецЦикла;
		//
		//ДанныеЗапроса.Вставить(ТипДанных, МассивДанных);
		
	КонецЦикла;
	
	//ПутьТест = "\\pivo.local\Resource\Личные\Кириллов ПС\r\work\ДанныеОбмена\Сверка.json";
	////оду_Общий.СформироватьJSON_Сериализ(ДанныеЗапроса, ПутьТест);
	//оду_Общий.СформироватьJSON_Сериализ(ДанныеДляСверки, ПутьТест);
	
	
	ПутьТест = "\\pivo.local\Resource\Личные\Кириллов ПС\r\work\ДанныеОбмена\СверкаОтвет.json";
	ДанныеОтвета = оду_Общий.ПрочитатьJSON_ИзТела_Сериализ(, ПутьТест);
	
	//Если ТекстЗапросаСбор = "" Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоТипуДанных(СтруктураПолей, МассивПроверяемыхПолей, СоставПолейОбъекта, ИмяПараметра, ЭтоИсточник = Истина)  Экспорт
	
	Если ЭтоИсточник = Истина Тогда
		ТипXMLОбъекта = СтруктураПолей.ТипXMLОбъектаИсточника;	
	Иначе	
		ТипXMLОбъекта = СтруктураПолей.ТипXMLОбъектаПриемника;	
	КонецЕсли; 
	
	ИмяТаблицы = СтрЗаменить(ТипXMLОбъекта, "Ref.", ".");
	МТипов = СтрРазделить(ИмяТаблицы, ".");
	ИмяТипаМетаданных = МТипов[0];		
	ИмяТипа = МТипов[1];
	ИмяПараметра = "МассивСсылок_" + ИмяТипа;
	
	ТекстЗапроса = "Выбрать 
	|	ОбъектОбмена.Ссылка КАК Ссылка," + Символы.ПС;
	
	Для каждого ИмяПоля Из МассивПроверяемыхПолей Цикл
		
		Если ИмяПоля = "ТипXMLОбъектаПриемника" ИЛИ ИмяПоля = "ТипXMLОбъектаИсточника" Тогда
			Текст = СтрШаблон("""%1"" КАК %2,", СтруктураПолей[ИмяПоля], ИмяПоля);
		ИначеЕсли СоставПолейОбъекта.Найти(ИмяПоля) = Неопределено Тогда
			Текст = СтрШаблон("Неопределено КАК %1,", СокрЛП(ИмяПоля));
		Иначе
			Текст = СтрШаблон("ЕСТЬNULL(ОбъектОбмена.%1, Неопределено) КАК %1,", СокрЛП(ИмяПоля));
		КонецЕсли; 
		ТекстЗапроса = ТекстЗапроса + Текст + Символы.ПС;
	КонецЦикла;
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 2) + Символы.ПС;
	
	Текст = СтрШаблон("ИЗ %1 КАК ОбъектОбмена", ИмяТаблицы);
	ТекстЗапроса = ТекстЗапроса + Текст + Символы.ПС;
	
	ТекстЗапроса = ТекстЗапроса + "		ГДЕ ОбъектОбмена.Ссылка В (&" + ИмяПараметра + ")" + Символы.ПС;
	
	Возврат  ТекстЗапроса;
	
КонецФункции

Функция СоставПолейОбъекта(СсылкаНаОбъект1С, СоставПроверяемыхПолейН)	Экспорт
	
	СоставПолей = Новый Массив;
	
	//МетаданныеОбъекта1С = СсылкаНаОбъект1С.ПолучитьОбъект().Метаданные();
	//
	//Для каждого ИмяРеквизита Из СоставПроверяемыхПолей Цикл
	//	Если  ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта1С) Тогда
	//		СоставПолей.Добавить(ИмяРеквизита);	
	//	КонецЕсли; 	
	//КонецЦикла; 
	
	
	//Если ТипЗнч(СоставПроверяемыхПолейН) = Тип("Массив") Тогда
	//	СоставПроверяемыхПолей = Новый Структура();
	//	Для каждого ИмяПоля Из СоставПроверяемыхПолейН Цикл
	//		СоставПроверяемыхПолей.Вставить(ИмяПоля);	
	//	КонецЦикла; 
	//Иначе	 
	 	СоставПроверяемыхПолей = СоставПроверяемыхПолейН;
	//КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СоставПроверяемыхПолей, СсылкаНаОбъект1С); 
	Для каждого КлючЗначение Из СоставПроверяемыхПолей Цикл
		ИмяРеквизита = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;
		Если ИмяРеквизита = "Код" ИЛИ ИмяРеквизита = "Наименование" Тогда
			Если ЗначениеЗаполнено(Значение)  Тогда
				СоставПолей.Добавить(ИмяРеквизита);	
			КонецЕсли; 
		ИначеЕсли Значение <> Неопределено  Тогда
			СоставПолей.Добавить(ИмяРеквизита);	
		КонецЕсли; 
	КонецЦикла; 
	
	
	Возврат  СоставПолей;
	
КонецФункции 

Функция СоставПроверяемыхПолейПоТипуДанных(ТипДанных)	Экспорт
	
	СоставПолей = Новый Массив; 
	СоставПолей.Добавить("ТипXMLОбъектаИсточника");
	СоставПолей.Добавить("ТипXMLОбъектаПриемника");
	
	СоставПолей.Добавить("ПометкаУдаления");
		
	Если ТипДанных = "Документы" Тогда
		СоставПолей.Добавить("Дата");
		СоставПолей.Добавить("Номер");
		СоставПолей.Добавить("Проведен");
		СоставПолей.Добавить("СуммаДокумента");
	ИначеЕсли ТипДанных = "Справочники" ИЛИ ТипДанных = "Планы видов характеристик" Тогда
		СоставПолей.Добавить("Номер");
		СоставПолей.Добавить("Наименование");
	КонецЕсли; 
	
	Возврат  СоставПолей;
	
КонецФункции 

Функция СтруктураПроверяемыхПолейПоТипуДанных(ТипДанных)	Экспорт
	
	СоставПолей = Новый Структура(); 
	СоставПолей.Вставить("ТипXMLОбъектаИсточника");
	СоставПолей.Вставить("ТипXMLОбъектаПриемника");
	
	СоставПолей.Вставить("ПометкаУдаления");
	
	Если ТипДанных = "Документы" Тогда
		СоставПолей.Вставить("Дата");
		СоставПолей.Вставить("Номер");
		СоставПолей.Вставить("Проведен");
		СоставПолей.Вставить("СуммаДокумента");
		СоставПолей.Вставить("НомерВходящегоДокумента");
		СоставПолей.Вставить("ДатаВходящегоДокумента");
		
	ИначеЕсли ТипДанных = "Справочники" ИЛИ ТипДанных = "Планы видов характеристик" Тогда
		СоставПолей.Вставить("Код");
		СоставПолей.Вставить("Наименование");
	КонецЕсли; 
	
	Возврат  СоставПолей;
	
КонецФункции 

#КонецОбласти

#Область  СверкаПриемник

 
Функция СверкаДанныхПриемник(ТелоЗапроса)	Экспорт
		
	ДанныеОтвета = Новый Структура();
	
	Для каждого КлючЗначение Из ТелоЗапроса Цикл
		
		ТипДанных = КлючЗначение.Ключ;
		
		//типы метаданных
		ДанныеЗапроса = КлючЗначение.Значение;
		
		КолВыборки = ДанныеЗапроса.Количество();//СтруктураДанных.МассивСсылок.Количество();
		сч = 1;
		ТекстЗапросаСбор = "";
		ЗапросДанных = Новый Запрос;
		
		Для каждого СтруктураДанных Из ДанныеЗапроса Цикл
			
			ТипXMLОбъекта = СтруктураДанных.ТипXMLОбъектаПриемника;
			//Типы данных
			МассивСсылок = Новый Массив;
			 
			Для каждого ИД Из СтруктураДанных.МассивСсылок Цикл
			
				Ссылка1С = пр_Общий.СсылкаПоТипXML(ТипXMLОбъекта, ИД);
				Если Ссылка1С <> Неопределено Тогда
					МассивСсылок.Добавить(Ссылка1С);
				КонецЕсли; 
			
			КонецЦикла;
			
			Если МассивСсылок.Количество() = 0 Тогда
			 	Продолжить;
			КонецЕсли; 
			
			СсылкаНаОбъект1С = МассивСсылок[0];
			МассивПроверяемыхПолей = СтруктураДанных.МассивПроверяемыхПолей;
			СоставПроверяемыхПолей = Новый Структура();
			Для каждого ИмяПоля Из МассивПроверяемыхПолей Цикл
				СоставПроверяемыхПолей.Вставить(ИмяПоля);	
			КонецЦикла;
			
			//МассивПроверяемыхПолей.Добавить("ТипXMLОбъектаИсточника");
			//МассивПроверяемыхПолей.Добавить("ТипXMLОбъектаПриемника");
			
			СоставПолейОбъекта = СоставПолейОбъекта(СсылкаНаОбъект1С, СоставПроверяемыхПолей);
							    
			ИмяПараметра = "";
			ТекстЗапроса = ПолучитьТекстЗапросаПоТипуДанных(СтруктураДанных, МассивПроверяемыхПолей, СоставПолейОбъекта, ИмяПараметра, Ложь);
			
			ЗапросДанных.УстановитьПараметр(ИмяПараметра, МассивСсылок);
			
			ТекстОбъеденить = ?(КолВыборки = сч, "", "	ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС);
			
			ТекстЗапроса = ТекстЗапроса + ТекстОбъеденить;
			
			сч = сч + 1;
			
			ТекстЗапросаСбор = ТекстЗапросаСбор + ТекстЗапроса;
			//Сбор запроса
		
		КонецЦикла; 

		ЗапросДанных.Текст = ТекстЗапросаСбор;
		РЗ = ЗапросДанных.Выполнить();
		
		Если РЗ.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Данные = пр_Общий.МассивСтруктурПоЗапросу(РЗ);
		
		Для каждого Стр Из Данные Цикл
			Стр.Ссылка = XMLСтрока(Стр.Ссылка);	
		КонецЦикла; 
		
		ДанныеОтвета.Вставить(ТипДанных, Данные);
		
		//ВДЗ = РЗ.Выбрать();
		
		//МассивДанных = Новый Массив;
		//
		//Пока ВДЗ.Следующий() Цикл
		//	
		//	СоставПроверяемыхПолей = СтруктураПроверяемыхПолейПоТипуДанных(ТипДанных);
		//	ЗаполнитьЗначенияСвойств(СоставПроверяемыхПолей, ВДЗ); 
		//	//СоставПроверяемыхПолей.Вставить("ТипXMLОбъектаИсточника", ВыборкаМетаданных.ТипXMLОбъектаИсточника);
		//	//СоставПроверяемыхПолей.Вставить("ТипXMLОбъектаПриемника", ВыборкаМетаданных.ТипXMLОбъектаПриемника);
		//	СоставПроверяемыхПолей.Вставить("Ссылка", XMLСтрока(ВДЗ.Ссылка));
		//				
		//	МассивДанных.Добавить(СоставПроверяемыхПолей);	
		//	
		//КонецЦикла;
		
		//ДанныеЗапроса.Вставить(ТипДанных, МассивДанных);
	
	КонецЦикла; 
	
	ПутьТест = "\\pivo.local\Resource\Личные\Кириллов ПС\r\work\ДанныеОбмена\СверкаОтвет.json";
	//оду_Общий.СформироватьJSON_Сериализ(ДанныеЗапроса, ПутьТест);
	оду_Общий.СформироватьJSON_Сериализ(ДанныеОтвета, ПутьТест);
	Возврат   ДанныеОтвета;
	
КонецФункции


#КонецОбласти
 

#КонецОбласти
 

#Область  ОтправкаТелеграмБот

//БазаИсточник, Метод, Объект1С = "", ОшибкаДляТелеграмм = "", БазаПриемник = "", Версия = "", Данные = Неопределено, ДопИнформация = ""
Функция ОтправитьСообщениеВТелеграмExchange(Метод, Объект1С = "", ОшибкаДляТелеграмм = "", БазаУО = "", Версия = "", Данные = Неопределено, ДопИнформация = "")  Экспорт
	
	Попытка
		
		Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь());
		НастройкиТекущейБД = Модуль.НастройкиТекущейБД();
		chat_id = НастройкиТекущейБД.chat_id; 
		token = НастройкиТекущейБД.token; 
		Если НЕ ЗначениеЗаполнено(chat_id) ИЛИ НЕ ЗначениеЗаполнено(token) Тогда
			Возврат Неопределено;	
		КонецЕсли; 
		
		//Параметры запраса
		text = "БазаИсточник: " + НастройкиТекущейБД.ПредставлениеТекущейБД + Символы.ПС;
		text = text + "БазаУО: " + БазаУО + Символы.ПС;
		
		text = text + "Метод: " + Метод + Символы.ПС;
		
		Если Объект1С <> "" Тогда
			text = text + "Объект 1С: " + Строка(Объект1С) + Символы.ПС;
		КонецЕсли; 
		
		Если Версия <> "" Тогда
			text = text + "Версия: " + Версия + Символы.ПС;
		КонецЕсли; 
		
		//Если Клиент <> "" Тогда
		//	text = text + "Клиент: " + Строка(Клиент) + Символы.ПС;
		//КонецЕсли; 
		
		Если ДопИнформация <> "" Тогда
			text = text + "ДопИнформация: " + ДопИнформация + Символы.ПС;
		КонецЕсли; 
		
		
		//Описание Ошибки
		Если ОшибкаДляТелеграмм <> "" Тогда
			text = text + "Ошибка!:" + ОшибкаДляТелеграмм + Символы.ПС;
		КонецЕсли; 
		
		////ДанныеЗапроса
		//Если Входящий <> "" Тогда
		//	Если Входящий = Истина Тогда
		//		НаправлениеЗапроса = "Входящий запрос:";
		//	Иначе 	
		//		НаправлениеЗапроса = "Исходящий запрос:";
		//	КонецЕсли; 
		//КонецЕсли; 
		//
		//Если ТелоЗапроса <> "" Тогда
		//	text = text + НаправлениеЗапроса + Символы.ПС;
		//	text = text + оду_ОбменДанными.СформироватьJSON(ТелоЗапроса, Истина);
		//КонецЕсли; 
		
		Результат = SendMessageНаСервере(chat_id, token, text);
		Возврат  Результат;
		
	Исключение
		Возврат Неопределено;	
	КонецПопытки; 
	
КонецФункции

Функция SendMessageНаСервере(chat_id, token, text, parse_mode = Неопределено, disable_web_page_preview = Неопределено, 
		disable_notification = Неопределено, reply_to_message_id = 0, reply_markup = Неопределено) Экспорт  
	
	Если НЕ ЗначениеЗаполнено(chat_id) ИЛИ НЕ ЗначениеЗаполнено(text) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("chat_id", ЧислоВСтроку(chat_id));
	ПараметрыЗапроса.Вставить("text", text);
	ПараметрыЗапроса.Вставить("parse_mode", Строка(parse_mode));
	ПараметрыЗапроса.Вставить("disable_web_page_preview", ФорматироватьБулево(disable_web_page_preview));
	ПараметрыЗапроса.Вставить("disable_notification", ФорматироватьБулево(disable_notification));
	ПараметрыЗапроса.Вставить("reply_to_message_id", ЧислоВСтроку(reply_to_message_id));
	ПараметрыЗапроса.Вставить("reply_markup", СформироватьJSON(reply_markup));
	
	Результат = ОтправитьHTTPЗапросТелеграм(token, "sendMessage", ПараметрыЗапроса);
	
	Возврат ОбработатьJSON(Результат); 
	
КонецФункции

Функция ОтправитьHTTPЗапросТелеграм(token, method, method_param = Неопределено, Данные = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		СоединениеHTTP = Новый HTTPСоединение("api.telegram.org", 443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		
		ПараметрыЗапроса = Новый Соответствие;
		ПараметрыЗапроса.Вставить("token", token);
		ПараметрыЗапроса.Вставить("method", method);
		ПараметрыЗапроса.Вставить("method_param", method_param);
		
		HTTPЗапрос = Новый HTTPЗапрос;
		Если Данные = Неопределено Тогда
			HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json");
		Иначе	
			ТекстЗапроса = СформироватьТелоЗапроса(Данные);
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ТекстЗапроса);
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Данные["Boundary"]);
			HTTPЗапрос.Заголовки.Вставить("Content-Length", Формат(ТекстЗапроса.Размер(), "ЧДЦ=0; ЧН=0; ЧГ=0"));
		КонецЕсли; 
		HTTPЗапрос.АдресРесурса = СформироватьМетод(ПараметрыЗапроса);
		
		Если Данные = Неопределено Тогда
			РезультатЗапроса = СоединениеHTTP.Получить(HTTPЗапрос);
		Иначе
			РезультатЗапроса = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
		КонецЕсли; 
		
		Если РезультатЗапроса.КодСостояния = 200 Тогда
			Результат = РезультатЗапроса.ПолучитьТелоКакСтроку();
		Иначе
			//РегистрыСведений.tl_Логи.ЛогHTTP(РезультатЗапроса);	
		КонецЕсли; 
		
	Исключение
		ЗаписатьОшибку(ИнформацияОбОшибке(), Истина);
	КонецПопытки; 
	
	Возврат Результат;
КонецФункции

Функция СформироватьМетод(ПараметрыЗапроса)
	Стр = "";
	ПараметрыМетода = "";
	
	// Переделать формирование строки с методом и параметрами под конкретный API
	// данная реализация для ВКонтакте
	Если ЗначениеЗаполнено(ПараметрыЗапроса["method_param"]) Тогда
		
		СтрокиПараметров = Новый Массив;
		
		Для каждого Строка Из ПараметрыЗапроса["method_param"] Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Значение) Тогда
				Продолжить;
			КонецЕсли;	
			
			СтрокиПараметров.Добавить(СтрШаблон("%1=%2", Строка.Ключ, Строка.Значение));
		КонецЦикла; 
		
		ПараметрыМетода = СтрСоединить(СтрокиПараметров, "&");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыМетода) Тогда
		Стр = СтрШаблон("bot%1/%2?%3", ПараметрыЗапроса["token"], ПараметрыЗапроса["method"], ПараметрыМетода); 
	Иначе
		Стр = СтрШаблон("bot%1/%2", ПараметрыЗапроса["token"], ПараметрыЗапроса["method"]); 
	КонецЕсли; 
	
	Возврат Стр;
КонецФункции
 
Функция СформироватьТелоЗапроса(Данные)
	
    Тело         = Новый ПотокВПамяти();
    ЗаписьДанных = Новый ЗаписьДанных(Тело, КодировкаТекста.UTF8, ПорядокБайтов.LittleEndian, Символы.ВК + Символы.ПС, Символы.ПС, Истина);
	
    ЗаписьДанных.ЗаписатьСтроку("--" + Данные["Boundary"]);
    ЗаписьДанных.ЗаписатьСтроку(СтрШаблон("Content-Disposition: form-data; name=""%1""; filename=""%2""", Данные["name"], Данные["ИмяФайла"]));
    ЗаписьДанных.ЗаписатьСтроку("Content-Type:" + Данные["Content-Type"]);
    ЗаписьДанных.ЗаписатьСтроку("");   
	
	ДвоичныеДанные = Новый ДвоичныеДанные(Данные["ИмяФайлаПолное"]);
    ЗаписьДанных.Записать(ДвоичныеДанные);
	
	ЗаписьДанных.ЗаписатьСтроку("");
    ЗаписьДанных.ЗаписатьСтроку("--" + Данные["Boundary"] + "--");
    ЗаписьДанных.Закрыть();
    
    ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные(); 
	
	Возврат ДанныеТела;
КонецФункции

#Область СлужебныеПроцедурыИФункции

//TODO:  доработать
Процедура ЗаписатьОшибку(ИнформацияОбОшибке = Неопределено, ЛогОбязательно = Ложь) Экспорт
	
	Если ИнформацияОбОшибке = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//TODO:  Добавить опцию ВестиЛоги()
	Если  ЛогОбязательно = Ложь Тогда 
		Возврат;	
	КонецЕсли; 
	
	ДобавитьЗапись("Ошибка", 
		ИнформацияОбОшибке.ИмяМодуля + " " + ИнформацияОбОшибке.НомерСтроки, 
		ИнформацияОбОшибке.Описание);
	
КонецПроцедуры 
	
//TODO:  Заменить на логи Телеграм - Канал для ошибок баз
Процедура ДобавитьЗапись(ТипСообщения, Контекст, Данные)
	Если ЗначениеЗаполнено(Данные) Тогда 
		//ТекстДок = Новый ТекстовыйДокумент;
		//ТекстДок.ВставитьСтроку("" + ТипСообщения + "/" + Контекст + "/" + Данные); 	
		//ТекстДок.Записать("\\pivo.local\Resource\Личные\Кириллов ПС\r\ut_2021\work\Логи\ЕГАИС\" + ТекущаяДата() + ".txt");
		//МенеджерЗаписи = РегистрыСведений.tl_Логи.СоздатьМенеджерЗаписи();
		//МенеджерЗаписи.Период = ТекущаяДата();
		//МенеджерЗаписи.ТипСообщения = ТипСообщения;
		//МенеджерЗаписи.Контекст = Контекст;
		//МенеджерЗаписи.Данные = Данные;
		//МенеджерЗаписи.Записать();
	КонецЕсли; 
КонецПроцедуры

Функция ЛогHTTP(ДанныеHTTP) Экспорт
	ИнформацияТелеграм = "";
	
	//TODO:  Добавить опцию ВестиЛоги()
	//Если НЕ ВестиЛоги() Тогда
	//	Возврат ИнформацияТелеграм;
	//КонецЕсли; 
	
	Если ТипЗнч(ДанныеHTTP) = Тип("HTTPЗапрос") Тогда
		ИнформацияТелеграм = СформироватьДанныеHTTPЗапроса(ДанныеHTTP);
	ИначеЕсли ТипЗнч(ДанныеHTTP) = Тип("HTTPОтвет") Тогда 	
		ИнформацияТелеграм = СформироватьДанныеHTTPОтвета(ДанныеHTTP);
	ИначеЕсли ТипЗнч(ДанныеHTTP) = Тип("HTTPСервисЗапрос") Тогда 	
		ИнформацияТелеграм = СформироватьДанныеHTTPЗапроса(ДанныеHTTP);
	КонецЕсли; 
	
	ЗаписатьHTTPЗапрос("ЛогHTTP", ИнформацияТелеграм);	
	
	Возврат ИнформацияТелеграм;
КонецФункции    

Процедура ЗаписатьHTTPЗапрос(Контекст, Данные) Экспорт
	ДобавитьЗапись("HTTPЗапрос", Контекст, Данные);
КонецПроцедуры


Функция СформироватьДанныеHTTPЗапроса(ЗапросHTTP)
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("HTTP метод = " + ЗапросHTTP.HTTPМетод);
	МассивСтрок.Добавить("БазовыйURL: " + ЗапросHTTP.БазовыйURL);
	МассивСтрок.Добавить("Заголовки: " + Символы.ПС + СформироватьJSON(ЗапросHTTP.Заголовки, Истина));
	МассивСтрок.Добавить("ОтносительныйURL: " + ЗапросHTTP.ОтносительныйURL);
	МассивСтрок.Добавить("ПараметрыURL: " + Символы.ПС + СформироватьJSON(ЗапросHTTP.ПараметрыURL, Истина));
	МассивСтрок.Добавить("ПараметрыЗапроса: " + Символы.ПС + СформироватьJSON(ЗапросHTTP.ПараметрыЗапроса, Истина));
	МассивСтрок.Добавить("Тело: " + Символы.ПС + СформироватьJSON(ОбработатьJSON(ЗапросHTTP.ПолучитьТелоКакСтроку()), Истина));
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции

Функция СформироватьДанныеHTTPОтвета(ОтветHTTP)
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("КодСостояния = " + ОтветHTTP.КодСостояния);
	МассивСтрок.Добавить("Заголовки: " + Символы.ПС + СформироватьJSON(ОтветHTTP.Заголовки, Истина));
	МассивСтрок.Добавить("Тело: " + Символы.ПС + ОтветHTTP.ПолучитьТелоКакСтроку());
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции


	
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
	Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматироватьБулево(ТекущееЗначение) Экспорт
	Возврат Формат(ТекущееЗначение, "БЛ=False; БИ=True");
КонецФункции

Функция КоординатыВСтроку(ТекущееЗначение) Экспорт
	Если ТекущееЗначение = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Формат(ТекущееЗначение, "ЧЦ=8; ЧДЦ=6; ЧРД=.; ЧРГ=''; ЧГ=0");
	КонецЕсли; 
КонецФункции

Функция ЧислоВСтроку(ТекущееЗначение) Экспорт
	Если ТекущееЗначение = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Формат(ТекущееЗначение, "ЧРГ=''; ЧГ=0");
	КонецЕсли; 
КонецФункции

#КонецОбласти 

#КонецОбласти